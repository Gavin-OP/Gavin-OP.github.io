{"version":3,"file":"static/js/365.e6d5f429.chunk.js","mappings":"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","sources":["features/notes/components/MarkdownRenderer.js","utils/Constants.js","services/GitHub.js","features/notes/pages/TestPage.js"],"sourcesContent":["// TODO\n// 1. Add the clickable checkbox\n// 2. Add support for Mermaid\n// 3. Add a menu for a lot of markdow files, like a side bar navigation\n// 4. Add a report button for the markdown files, so that can report mistakes\n// 5. add a button to copy the code in the markdown file\n// 6. Convert the markdown file to pdf\n// 7. Incorrect URL will be redirected to the disclaimer page\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { useLocation } from 'react-router-dom';\nimport remarkGfm from \"remark-gfm\";\nimport rehypeRaw from \"rehype-raw\";\nimport rehypeKatex from 'rehype-katex'\nimport remarkMath from 'remark-math';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { xcode } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n// import rehypeMermaid from 'rehype-mermaid';\n// import remarkMermaid from 'remark-mermaid';\n\nimport 'katex/dist/katex.min.css';\nimport '../styles/MarkdownRenderer.css';\n// import 'mermaid/dist/mermaid.esm.min.mjs';\n\n\n\nconst MarkdownRenderer = ({ filename }) => {\n    const [content, setContent] = useState('');\n    const location = useLocation();\n    // const [checkboxStates, setCheckboxStates] = useState({});\n\n    const fileToRender = filename === undefined ? 'disclaimer' : filename;\n\n    const fetchFile = useCallback((file) => {\n        fetch(`/notes/${file}.md`)\n            .then((response) => response.text())\n            .then((text) => {\n                // if (text.includes(\"<!DOCTYPE html>\")) {\n                //     console.log(`Failed to fetch file: /notes/${file}.md`);\n                //     throw new Error(`File not found: /notes/${file}.md`);\n                // }\n                setContent(text);\n            })\n            .catch((error) => {\n                console.error(error);\n                if (file !== 'disclaimer') {\n                    console.log(`Retrying with disclaimer.md`);\n                    fetchFile('disclaimer');\n                } else {\n                    console.log(`Failed to fetch file: /notes/${file}.md`);\n                }\n            });\n    }, []);\n\n    useEffect(() => {\n        fetchFile(fileToRender);\n    }, [fileToRender, fetchFile]);\n\n    // make the checkbox can be checked or unchecked\n    // const handleCheckboxChange = (event) => {\n    //     console.log(event.target.checked);\n    // }\n    // const handleCheckboxChange = (event, index) => {\n    //     setCheckboxStates({\n    //         ...checkboxStates,\n    //         [index]: event.target.checked,\n    //     });\n    //     console.log(event.target.checked);\n    // };\n    // const handleCheckboxChange = (event, index) => {\n    //     setCheckboxStates((prevStates) => ({\n    //         ...prevStates,\n    //         [index]: !prevStates[index],\n    //     }));\n    //     console.log(event.target.checked);\n    //     console.log(index)\n\n    // };\n\n\n    const handleSmoothScroll = (id) => {\n        const element = document.getElementById(id);\n        if (element) {\n            element.scrollIntoView({ behavior: 'smooth' });\n        }\n    };\n\n    const getCurrentUrl = () => {\n        return `${window.location.origin}${location.pathname}${location.hash}`;\n    };\n\n    return (\n        <div className=\"markdown-container\">\n            <div id=\"write\">\n                <ReactMarkdown\n                    className=\"markdown-body\"\n                    remarkPlugins={[remarkGfm, remarkMath]}\n                    rehypePlugins={[rehypeRaw, rehypeKatex]}\n\n                    // make the checkbox can be check or unchecked, use handleCheckBoxChange\n                    // components={{\n                    //     input({ node, ...props }) {\n                    //         console.log(node.position);\n                    //         if (props.type === 'checkbox') {\n                    //             const index = node && node.position && node.position.start ? node.position.start.offset : null;\n                    //             return <input type=\"checkbox\" {...props} disabled={false} checked={checkboxStates[index] || false} onChange={(event) => handleCheckboxChange(event, index)}/>;\n                    //         }\n                    //         return <input {...props} />;\n                    //     },\n                    // }}\n\n                    // make the checkbox disable is false\n                    // components={{\n                    //     input({ node, ...props }) {\n                    //         if (props.type === 'checkbox') {\n                    //             return <input type=\"checkbox\" {...props} disabled={false} />;\n                    //         }\n                    //         return <input {...props} />;\n                    //     },\n                    // }}\n\n\n\n                    components={{\n                        // pre({ node, className, children, ...props }) {\n                        //     if (children[\"type\"] === \"code\") {\n                        //         try {\n                        //             const codeNode = children.children[0];\n                        //             console.log(codeNode)\n                        //             const match = children[\"props\"][\"className\"].match(/language-(\\w+)/)\n                        //             return (\n\n                        //                 <pre className='md-fences'>\n                        //                     {children}\n                        //                 </pre>\n                        //             )\n                        //         } catch (e) {\n                        //             return (\n                        //                 <pre className='md-fences'>\n                        //                     {children}\n                        //                 </pre>\n                        //             )\n                        //         }\n                        //     }\n                        // },\n\n\n\n                        pre({ node, className, children, ...props }) {\n                            const codeNode = node.children[0];\n                            const match = /language-(\\w+)/.exec(codeNode?.properties?.className || '');\n                            return match ? (\n                                <SyntaxHighlighter\n                                    style={xcode}\n                                    language={match[1]}\n                                    PreTag=\"pre\"\n                                    {...props}\n                                >\n                                    {String(codeNode.children[0].value).replace(/\\n$/, '')}\n                                </SyntaxHighlighter>\n                            ) : (\n                                <pre className=\"md-fences\" {...props}>\n                                    {children}\n                                </pre>\n                            );\n                        },\n\n\n                        a({ node, ...props }) {\n                            if (props.href && (props.href.startsWith('#user-content-fn-') || props.href.startsWith('#user-content-fnref-'))) {\n                                const currentUrl = getCurrentUrl();\n                                return (\n                                    // <a\n                                    //     {...props}\n                                    //     href={`${currentUrl}${props.href}`}\n                                    //     onClick={(event) => {\n                                    //         event.preventDefault();\n                                    //         handleSmoothScroll(props.href.substring(1));\n                                    //     }}\n                                    // />\n                                    <a\n                                        {...props}\n                                        href={`${currentUrl}${props.href}`}\n                                        onClick={(event) => {\n                                            event.preventDefault();\n                                            handleSmoothScroll(props.href.substring(1));\n                                        }}\n                                    >\n                                        {props.children.length === 0 ? 'Link' : props.children}\n                                    </a>\n                                );\n                            }\n                            // return <a {...props} />;\n                            return <a {...props}>{props.children.length === 0 ? 'Link' : props.children}</a>;\n\n                        }\n\n\n                    }}\n\n                >\n                    {content}\n                </ReactMarkdown>\n            </div>\n        </div>\n    );\n};\n\nexport default MarkdownRenderer;","export const GITHUB_CONFIG = {\n    owner: 'Gavin-OP',\n    repo: 'Gavin-OP.github.io',\n    branch: 'master',\n    basePath: 'public/notes/'\n};\n\nexport const MARKDOWN_CONFIG = {\n    extensions: ['.md'],\n    defaultFile: 'disclaimer.md'\n};","// TODO\n// 1. inventory?\n// 2. test getFileContent\nimport { Octokit } from \"@octokit/core\";\nimport { GITHUB_CONFIG } from \"../utils/Constants\";\n\n// Centralize all GitHub API calls\nexport class GitHubService {\n  constructor(\n    owner = GITHUB_CONFIG.owner,\n    repo = GITHUB_CONFIG.repo,\n    branch = GITHUB_CONFIG.branch,\n    base_path = GITHUB_CONFIG.basePath,\n    auth = process.env.REACT_APP_GITHUB_TOKEN\n  ) {\n    this.owner = owner;\n    this.repo = repo;\n    this.branch = branch;\n    this.base_path = base_path;\n    this.octokit = new Octokit({\n      auth: auth,\n    });\n  }\n\n  transformGitHubTree(tree) {\n    // Transform flat tree into hierarchical structure\n    // if want any order or inventory, add here\n    const root = {\n      name: \"notes\",\n      path: this.base_path,\n      items: [],\n      isFolder: true,\n    };\n    const map = { \"\": root };\n\n    tree.forEach((item) => {\n      if (!item.path.startsWith(this.base_path)) return;\n\n      const path = item.path.replace(this.base_path, \"\");\n      const parts = path.split(\"/\");\n      let currentPath = \"\";\n\n      parts.forEach((part, index) => {\n        const isLast = index === parts.length - 1;\n        const parentPath = currentPath;\n        currentPath = currentPath ? `${currentPath}/${part}` : part;\n\n        if (!map[currentPath]) {\n          const node = {\n            name: part,\n            path: `${this.base_path}${currentPath}`,\n            isFolder: !isLast || item.type === \"tree\",\n            items: [],\n          };\n          map[currentPath] = node;\n          map[parentPath].items.push(node);\n        }\n      });\n    });\n\n    return root;\n  }\n\n  async getAllNotes() {\n    try {\n      const response = await this.octokit.request(\n        \"GET /repos/{owner}/{repo}/git/trees/{branch}?recursive=1\",\n        {\n          owner: this.owner,\n          repo: this.repo,\n          branch: this.branch,\n          recursive: true,\n        }\n      );\n\n      return this.transformGitHubTree(response.data.tree);\n    } catch (error) {\n      console.error(\"Error fetching notes:\", error);\n      return [];\n    }\n  }\n\n  async getFileContent(path) {\n    try {\n      const response = await fetch(`${path}`);\n      if (!response.ok) {\n        throw new Error(`Error fetching file: ${response.statusText}`);\n      }\n      const text = await response.text();\n      return text;\n    } catch (error) {\n      console.error(\"Error fetching file from public folder:\", error);\n      return null;\n    }\n  }\n\n  // async getFileContent(path) {\n  //   try {\n  //     const response = await this.octokit.request(\n  //       \"GET /repos/{owner}/{repo}/contents/{path}\",\n  //       {\n  //         owner: this.owner,\n  //         repo: this.repo,\n  //         path: path,\n  //       }\n  //     );\n\n  //     return atob(response.data.content);\n  //   } catch (error) {\n  //     console.error(\"Error fetching file:\", error);\n  //     return null;\n  //   }\n  // }\n}\n","import React from \"react\";\nimport { GitHubService } from \"../../../services/GitHub\";\nimport { GITHUB_CONFIG } from \"../../../utils/Constants\";\nimport MarkdownRenderer from \"../components/MarkdownRenderer\";\n\nconst TestPage = () => {\n  const [debugInfo, setDebugInfo] = React.useState({\n    treeData: null,\n    fileContent: null,\n    error: null,\n  });\n\n  // Test GitHub Service\n  React.useEffect(() => {\n    const testGitHubService = async () => {\n      const github = new GitHubService(\n        GITHUB_CONFIG.owner,\n        GITHUB_CONFIG.repo,\n        GITHUB_CONFIG.branch,\n        GITHUB_CONFIG.basePath,\n        process.env.REACT_APP_GITHUB_TOKEN\n      );\n\n      try {\n        const tree = await github.getAllNotes();\n        console.log(\"Test File Tree:\", tree);\n\n        // Test getting a specific file\n        const testFilePath = \"/notes/disclaimer.md\"; // or any existing file path\n        const fileContent = await github.getFileContent(testFilePath);\n        console.log(\"File Content Result:\", fileContent);\n\n        setDebugInfo({\n          treeData: tree,\n          fileContent: fileContent,\n          error: null,\n        });\n      } catch (err) {\n        console.error(\"GitHub Service Test Error:\", err);\n        setDebugInfo((prev) => ({\n          ...prev,\n          error: err.message,\n        }));\n      }\n    };\n\n    testGitHubService();\n  }, []);\n\n  return (\n    <div\n      style={{\n        padding: \"20px\",\n        backgroundColor: \"#f5f5f5\",\n      }}\n    >\n      <div>\n        <h1 style={{ textAlign: \"center\" }}>Test Page</h1>\n        <h4>File Tree Sample:</h4>\n        <div style={{ maxHeight: \"300px\", overflow: \"auto\" }}>\n          <pre>\n            {debugInfo.treeData\n              ? JSON.stringify(debugInfo.treeData.items.slice(0, 3), null, 2)\n              : \"Loading...\"}\n          </pre>\n        </div>\n        <h4>File Content:</h4>\n        <MarkdownRenderer />\n      </div>\n    </div>\n  );\n};\n\nexport default TestPage;\n"],"names":["_ref","filename","content","setContent","useState","location","useLocation","fileToRender","undefined","fetchFile","useCallback","file","fetch","then","response","text","catch","error","console","log","useEffect","_jsx","className","children","id","ReactMarkdown","remarkPlugins","remarkGfm","remarkMath","rehypePlugins","rehypeRaw","rehypeKatex","components","pre","_ref2","_codeNode$properties","node","props","codeNode","match","exec","properties","SyntaxHighlighter","style","xcode","language","PreTag","String","value","replace","a","_ref3","href","startsWith","currentUrl","window","origin","pathname","hash","onClick","event","preventDefault","element","document","getElementById","scrollIntoView","behavior","handleSmoothScroll","substring","length","GITHUB_CONFIG","GitHubService","constructor","owner","arguments","repo","branch","base_path","auth","process","REACT_APP_GITHUB_TOKEN","this","octokit","Octokit","transformGitHubTree","tree","root","name","path","items","isFolder","map","forEach","item","parts","split","currentPath","part","index","isLast","parentPath","type","push","getAllNotes","request","recursive","data","getFileContent","ok","Error","statusText","TestPage","debugInfo","setDebugInfo","React","treeData","fileContent","async","github","testFilePath","err","prev","message","testGitHubService","padding","backgroundColor","_jsxs","textAlign","maxHeight","overflow","JSON","stringify","slice","MarkdownRenderer"],"sourceRoot":""}