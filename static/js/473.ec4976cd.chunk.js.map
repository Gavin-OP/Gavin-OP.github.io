{"version":3,"file":"static/js/473.ec4976cd.chunk.js","mappings":"iJA4CA,MAAMA,EAAuBC,IAKtB,IALuB,aAC5BC,EAAY,YACZC,EAAW,YACXC,EAAW,cACXC,GACDJ,EACC,MAAOK,EAAQC,IAAaC,EAAAA,EAAAA,WAAS,IAC9BC,EAAaC,IAAkBF,EAAAA,EAAAA,WAAS,GAe/C,IAZAG,EAAAA,EAAAA,YAAU,MAELF,GACDP,GACAC,EAAYS,WAAWV,EAAaW,QAEpCN,GAAU,GACVG,GAAe,GACjB,GACC,CAACP,EAAaD,EAAcO,KAG1BP,EACH,OAAO,KAIT,MAYMY,EAAY,CAAEC,WADEb,EAAaW,OAASV,EACI,OAAS,UAEzD,OACEa,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,OACEC,UAAY,uBACVjB,EAAakB,SAAW,SAAW,QAErCC,QApBeC,IACnBA,EAAEC,kBACErB,EAAakB,UACfb,GAAWD,GACXD,GAAiBA,EAAcH,EAAaW,OAE5CT,GAAeA,EAAYF,EAAaW,KAC1C,EAcIW,MAAOV,EAAUG,UAEjBD,EAAAA,EAAAA,MAAA,QAAMG,UAAU,2BAA2BK,MAAOV,EAAUG,SAAA,CACzDf,EAAakB,UACZF,EAAAA,EAAAA,KAAAO,EAAAA,SAAA,CAAAR,SACGX,GAASY,EAAAA,EAAAA,KAACQ,EAAAA,IAAc,KAAMR,EAAAA,EAAAA,KAACS,EAAAA,IAAe,OAIjDT,EAAAA,EAAAA,KAACU,EAAAA,IAAO,KAEVV,EAAAA,EAAAA,KAAA,SAAAD,SAAQf,EAAa2B,YAKxB3B,EAAakB,UAAYd,IACxBY,EAAAA,EAAAA,KAAA,OAAKC,UAAU,yBAAyBW,GAAG,kBAAiBb,SAEzDf,EAAa6B,MAAMC,KAAI,CAACC,EAAMC,KAC7BhB,EAAAA,EAAAA,KAAClB,EAAoB,CAEnBE,aAAc,IACT+B,EAEHpB,KAAO,GAAEX,EAAaW,QAAQoB,EAAKJ,QAErC1B,YAAaA,EACbE,cAAeA,EACfD,YAAaA,GARR8B,SAaT,EAIV,G,gJCtFA,MAmLA,EAnLyBjC,IAA0B,IAAzB,gBAAEkC,GAAiBlC,EAE3C,MAAMmC,GAAWC,EAAAA,EAAAA,MA+CjB,OACEnB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,qBAAoBF,UACjCC,EAAAA,EAAAA,KAAA,OAAKY,GAAG,QAAOb,UACbC,EAAAA,EAAAA,KAACoB,EAAAA,EAAa,CACZnB,UAAU,gBACVoB,cAAe,CAACC,EAAAA,EAAWC,EAAAA,GAC3BC,cAAe,CAACC,EAAAA,EAAWC,EAAAA,GAC3BC,WAAY,CAEVC,GAAAA,CAAGC,GAA2C,IAADC,EAAA,IAAzC,KAAEC,EAAI,UAAE9B,EAAS,SAAEF,KAAaiC,GAAOH,EACzC,MAAMI,EAAWF,EAAKhC,SAAS,GACzBmC,EAAQ,iBAAiBC,MACrB,OAARF,QAAQ,IAARA,GAAoB,QAAZH,EAARG,EAAUG,kBAAU,IAAAN,OAAZ,EAARA,EAAsB7B,YAAa,IAErC,OAAOiC,GACLlC,EAAAA,EAAAA,KAACqC,EAAAA,EAAiB,CAChB/B,MAAOgC,EAAAA,EACPC,SAAUL,EAAM,GAChBM,OAAO,SACHR,EAAKjC,SAER0C,OAAOR,EAASlC,SAAS,GAAG2C,OAAOC,QAAQ,MAAO,OAGrD3C,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAgB+B,EAAKjC,SACjCA,GAGP,EAGA6C,CAAAA,CAACC,GAAsB,IAArB,KAAEd,KAASC,GAAOa,EAClB,GACEb,EAAMc,OACLd,EAAMc,KAAKpD,WAAW,sBACrBsC,EAAMc,KAAKpD,WAAW,yBACxB,CACA,MAAMqD,EAlFV,GAAEC,OAAO9B,SAAS+B,SAAS/B,EAASgC,WAAWhC,EAASiC,OAmFpD,OACEnD,EAAAA,EAAAA,KAAA,QACMgC,EACJc,KAAO,GAAEC,IAAaf,EAAMc,OAC5B3C,QAAUiD,IACRA,EAAMC,iBApFEzC,KAC1B,MAAM0C,EAAUC,SAASC,eAAe5C,GACpC0C,GACFA,EAAQG,eAAe,CAAEC,SAAU,UACrC,EAiFkBC,CAAmB3B,EAAMc,KAAKc,UAAU,GAAG,EAC3C7D,SAEyB,IAA1BiC,EAAMjC,SAAS8D,OAAe,OAAS7B,EAAMjC,UAGpD,CACA,OACEC,EAAAA,EAAAA,KAAA,QAAOgC,EAAKjC,SACiB,IAA1BiC,EAAMjC,SAAS8D,OAAe,OAAS7B,EAAMjC,UAGpD,EAGA+D,GAAAA,CAAGC,GAAsB,IAArB,KAAEhC,KAASC,GAAO+B,EACpB,GAAI/B,EAAMgC,MAAQhC,EAAMgC,IAAItE,WAAW,QAAS,CAC9C,MAAMsE,EA9FQC,EAACC,EAAMC,KACjC,MAAMC,EAAQF,EAAKG,MAAM,KACnBC,EAAQH,EAASE,MAAM,KAC7BD,EAAMG,MACN,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAMT,OAAQW,IACf,MAAbF,EAAME,KACO,OAAbF,EAAME,GAAaJ,EAAMG,MACxBH,EAAMK,KAAKH,EAAME,KAExB,OAAOJ,EAAMM,KAAK,IAAI,EAqFET,CACVjB,OAAO9B,SAASiC,KAAKR,QAAQ,KAAM,IACnCX,EAAMgC,KAGR,OADAW,QAAQC,IAAIZ,IACLhE,EAAAA,EAAAA,KAAA,UAASgC,EAAOgC,IAAKA,GAC9B,CACA,OAAOhE,EAAAA,EAAAA,KAAA,UAASgC,GAClB,EAGA6C,IAAAA,CAAIC,GAAsB,IAArB,KAAE/C,KAASC,GAAO8C,EACrB,OACE9C,EAAM/B,WACN+B,EAAM/B,UAAU8E,SAAS,kBAGvB/E,EAAAA,EAAAA,KAAA,WACMgC,EACJ1B,MAAO,IACF0B,EAAM1B,MACT0E,UAAW,QACXjF,SAEDiC,EAAMjC,YAINC,EAAAA,EAAAA,KAAA,WAAUgC,EAAKjC,SAAGiC,EAAMjC,UACjC,GA+BAA,SAEDkB,OAGD,C,oEC3LH,SAASgE,IAAsC,IAA7BC,EAAWC,UAAAtB,OAAA,QAAAuB,IAAAD,UAAA,GAAAA,UAAA,GAAG,aACrC,MAAOE,EAAOC,IAAYhG,EAAAA,EAAAA,UAAS,CACjCiG,SAAU,KACVC,eAAgB,KAChBvG,YAAaiG,EACbO,WAAW,EACXC,MAAO,OAIHC,GAAgBC,EAAAA,EAAAA,UACpB,IACE,IAAIC,EAAAA,EACFC,EAAAA,EAAcC,MACdD,EAAAA,EAAcE,KACdF,EAAAA,EAAcG,OACdH,EAAAA,EAAcI,SACdC,CAAAA,SAAAA,aAAAA,WAAAA,GAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYC,yBAEhB,KAIF3G,EAAAA,EAAAA,YAAU,KACc4G,WACpB,IACE,MAAMC,QAAaX,EAAcY,cACjCjB,GAAUkB,IAAI,IAAWA,EAAMjB,SAAUe,EAAMb,WAAW,KAC5D,CAAE,MAAOC,GACPJ,GAAUkB,IAAI,IACTA,EACHd,MAAO,gCACPD,WAAW,KAEf,GAGFgB,EAAe,GACd,KAGHhH,EAAAA,EAAAA,YAAU,KACa4G,WACnB,GAAKhB,EAAMpG,YAAX,CAEAqG,GAAUkB,IAAI,IAAWA,EAAMf,WAAW,MAC1C,IACE,MAAMiB,QAAgBf,EAAcgB,eAAetB,EAAMpG,aACzDqG,GAAUkB,IAAI,IACTA,EACHhB,eAAgBkB,EAChBjB,WAAW,KAEf,CAAE,MAAOC,GACPJ,GAAUkB,IAAI,IACTA,EACHd,MAAO,8BACPD,WAAW,KAEf,CAhB8B,CAgB9B,EAGFmB,EAAc,GACb,CAACvB,EAAMpG,cAOV,MAAO,IACFoG,EACHwB,eANsBlH,IACtB2F,GAAUkB,IAAI,IAAWA,EAAMvH,YAAaU,KAAQ,EAOxD,C,wHCnGA,MAyFA,EAzFiBmH,KACf,MAAOC,EAAWC,GAAgBC,EAAAA,SAAe,CAC/CC,SAAU,KACVC,YAAa,KACblI,YAAa,KACbyG,MAAO,QAIH,SAAEH,EAAQ,eAAEC,EAAc,UAAEC,EAAS,MAAEC,EAAK,eAAEmB,IAClD5B,EAAAA,EAAAA,KAiDF,OA9CAgC,EAAAA,WAAgB,KACYZ,WACxB,MAAMe,EAAS,IAAIvB,EAAAA,EACjBC,EAAAA,EAAcC,MACdD,EAAAA,EAAcE,KACdF,EAAAA,EAAcG,OACdH,EAAAA,EAAcI,SACdC,CAAAA,SAAAA,aAAAA,WAAAA,GAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYC,wBAGd,IACE,MAAME,QAAac,EAAOb,cAC1B5B,QAAQC,IAAI,kBAAmB0B,GAK/B,MAAMe,EAAe,gCAEfF,QAAoBC,EAAOT,eAAeU,GAGhDR,EAAeQ,GAEfL,GAAcR,IAAI,IACbA,EACHU,SAAUZ,EACVa,YAAaA,EACblI,YAAaoI,EACb3B,MAAO,QAEX,CAAE,MAAO4B,GACP3C,QAAQe,MAAM,6BAA8B4B,GAC5CN,GAAcR,IAAI,IACbA,EACHd,MAAO4B,EAAIC,WAEf,GAGFC,EAAmB,GAClB,IAGH7C,QAAQC,IAAI,yBAA0BmC,EAAU9H,cAG9Ce,EAAAA,EAAAA,KAAA,OACEM,MAAO,CACLmH,QAAS,OACTC,gBAAiB,WACjB3H,UAEFD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAIM,MAAO,CAAEqH,UAAW,UAAW5H,SAAC,eACpCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,oBACJC,EAAAA,EAAAA,KAAClB,EAAAA,EAAoB,CACnBE,aAAcuG,EACdtG,YAAa8H,EAAU9H,eAEzBe,EAAAA,EAAAA,KAAA,MAAAD,SAAI,mBACJC,EAAAA,EAAAA,KAAC4H,EAAAA,EAAgB,CAAC3G,gBAAiBuE,KAEnCxF,EAAAA,EAAAA,KAAA,MAAAD,SAAI,uBACJC,EAAAA,EAAAA,KAAA,OAAKM,MAAO,CAAEuH,UAAW,QAASC,SAAU,QAAS/H,UACnDC,EAAAA,EAAAA,KAAA,OAAAD,SACGgH,EAAUG,SACPa,KAAKC,UAAUjB,EAAUG,SAASrG,MAAMoH,MAAM,EAAG,GAAI,KAAM,GAC3D,qBAIN,C,0DChEH,MAAMpC,EACXqC,WAAAA,GAMG,IALDnC,EAAKZ,UAAAtB,OAAA,QAAAuB,IAAAD,UAAA,GAAAA,UAAA,GAAGW,EAAAA,EAAcC,MACtBC,EAAIb,UAAAtB,OAAA,QAAAuB,IAAAD,UAAA,GAAAA,UAAA,GAAGW,EAAAA,EAAcE,KACrBC,EAAMd,UAAAtB,OAAA,QAAAuB,IAAAD,UAAA,GAAAA,UAAA,GAAGW,EAAAA,EAAcG,OACvBkC,EAAShD,UAAAtB,OAAA,QAAAuB,IAAAD,UAAA,GAAAA,UAAA,GAAGW,EAAAA,EAAcI,SAC1BkC,EAAIjD,UAAAtB,OAAA,QAAAuB,IAAAD,UAAA,GAAAA,UAAA,GAAGgB,CAAAA,SAAAA,aAAAA,WAAAA,GAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYC,uBAEnBiC,KAAKtC,MAAQA,EACbsC,KAAKrC,KAAOA,EACZqC,KAAKpC,OAASA,EACdoC,KAAKF,UAAYA,EACjBE,KAAKC,QAAU,IAAIC,EAAAA,EAAQ,CACzBH,KAAMA,GAEV,CAOAI,mBAAAA,CAAoBlC,GAElB,MAAMmC,EAAO,CACX9H,KAAM,QACNhB,KAAM0I,KAAKF,UACXtH,MAAO,GACPX,UAAU,GAENY,EAAM,CAAE,GAAI2H,GA2BlB,OAzBAnC,EAAKoC,SAAS3H,IACZ,IAAKA,EAAKpB,KAAKD,WAAW2I,KAAKF,WAAY,OAE3C,MACM7D,EADOvD,EAAKpB,KAAKgD,QAAQ0F,KAAKF,UAAW,IAC5B9D,MAAM,KACzB,IAAIpF,EAAc,GAElBqF,EAAMoE,SAAQ,CAACC,EAAM3H,KACnB,MAAM4H,EAAS5H,IAAUsD,EAAMT,OAAS,EAClCgF,EAAa5J,EAGnB,GAFAA,EAAcA,EAAe,GAAEA,KAAe0J,IAASA,GAElD7H,EAAI7B,GAAc,CACrB,MAAM8C,EAAO,CACXpB,KAAMgI,EACNhJ,KAAO,GAAE0I,KAAKF,YAAYlJ,IAC1BiB,UAAW0I,GAAwB,SAAd7H,EAAK+H,KAC1BjI,MAAO,IAETC,EAAI7B,GAAe8C,EACnBjB,EAAI+H,GAAYhI,MAAM4D,KAAK1C,EAC7B,IACA,IAGG0G,CACT,CAMA,iBAAMlC,GACJ,IACE,MAAMwC,QAAiBV,KAAKC,QAAQU,QAClC,2DACA,CACEjD,MAAOsC,KAAKtC,MACZC,KAAMqC,KAAKrC,KACXC,OAAQoC,KAAKpC,OACbgD,WAAW,IAKf,OAFAtE,QAAQC,IAAI,sBAELyD,KAAKG,oBAAoBO,EAASG,KAAK5C,KAChD,CAAE,MAAOZ,GAEP,OADAf,QAAQe,MAAM,wBAAyBA,GAChC,EACT,CACF,CAOA,iBAAMyD,CAAYxJ,GAChB,IACE,MAAMoJ,QAAiBK,MAAO,GAAEzJ,KAEhC,cADmBoJ,EAASM,QACftE,SAAS,kBACxB,CAAE,MAAOW,GAEP,OADAf,QAAQe,MAAM,yBAA0BA,IACjC,CACT,CACF,CAOA,oBAAMiB,CAAehH,GAEnB,MACM2J,QAAmBjB,KAAKc,YAAYxJ,GAASA,EAD9B,sBAGrB,IACE,MAAMoJ,QAAiBK,MAAO,GAAEE,KAChC,IAAKP,EAASQ,GACZ,MAAM,IAAIC,MAAO,wBAAuBT,EAASU,cAGnD,aADmBV,EAASM,MAE9B,CAAE,MAAO3D,GAEP,OADAf,QAAQe,MAAM,0CAA2CA,GAClD,IACT,CACF,E,kCCrJK,MAAMI,EAAgB,CAC3BC,MAAO,WACPC,KAAM,qBACNC,OAAQ,WACRC,SAAU,Q","sources":["features/notes/components/FileExplorerRenderer.js","features/notes/components/MarkdownRenderer.js","features/notes/hooks/useNotes.js","features/notes/pages/TestPage.js","services/GitHub.js","utils/Constants.js"],"sourcesContent":["/**\n * FileExplorerRenderer Component\n *\n * This component is responsible for rendering a file explorer tree structure.\n * It displays folders and files, and allows users to expand/collapse folders\n * and select files. The current path is highlighted in bold.\n *\n * Props:\n * - explorerData: Object containing the file/folder structure. Each item in the structure\n *   should have the following properties:\n *   - name: The name of the file or folder.\n *   - path: The path (start with `notes/`) of the file or folder.\n *   - isFolder: Boolean indicating whether the item is a folder.\n *   - items: Array of child items (if the item is a folder).\n * - currentPath: String representing the current selected path (start with `notes/`).\n * - onFileClick: Function to handle file click events. Receives the file path as an argument.\n * - onFolderClick: Function to handle folder click events. Receives the folder path as an argument.\n *\n * State:\n * - expand: Boolean indicating whether the folder is expanded.\n *\n * Usage:\n * <FileExplorerRenderer\n *   explorerData={fileTree}\n *   currentPath={currentPath}\n *   onFileClick={handleFileClick}\n *   onFolderClick={handleFolderClick}\n * />\n *\n * TODO:\n * 1. Do not show .md extension in file names.\n * 2. Determine where to put the onclick logic.\n * 3. Handle the current path highlighting.\n */\n\nimport { useState, useEffect } from \"react\";\nimport {\n  VscChevronRight,\n  VscChevronDown,\n  VscFile,\n  // VscFolder,\n} from \"react-icons/vsc\";\nimport \"../styles/FileExplorerRenderer.css\";\n\nconst FileExplorerRenderer = ({\n  explorerData,\n  currentPath,\n  onFileClick,\n  onFolderClick,\n}) => {\n  const [expand, setExpand] = useState(false);\n  const [hasExpanded, setHasExpanded] = useState(false);\n\n  // expand folder if currentPath includes the folder path when component mounts\n  useEffect(() => {\n    if (\n      !hasExpanded &&\n      explorerData &&\n      currentPath.startsWith(explorerData.path)\n    ) {\n      setExpand(true);\n      setHasExpanded(true);\n    }\n  }, [currentPath, explorerData, hasExpanded]);\n\n  // if explorerData is null or undefined, return null\n  if (!explorerData) {\n    return null;\n  }\n\n  // handle click event for folder and file\n  const handleClick = (e) => {\n    e.stopPropagation();\n    if (explorerData.isFolder) {\n      setExpand(!expand);\n      onFolderClick && onFolderClick(explorerData.path);\n    } else {\n      onFileClick && onFileClick(explorerData.path);\n    }\n  };\n\n  // style for current path\n  const isCurrentPath = explorerData.path === currentPath;\n  const itemStyle = { fontWeight: isCurrentPath ? \"bold\" : \"normal\" };\n\n  return (\n    <div>\n      <div\n        className={`file-explorer-item ${\n          explorerData.isFolder ? \"folder\" : \"file\"\n        }`}\n        onClick={handleClick}\n        style={itemStyle}\n      >\n        <span className=\"file-explorer-icon-label\" style={itemStyle}>\n          {explorerData.isFolder ? (\n            <>\n              {expand ? <VscChevronDown /> : <VscChevronRight />}\n              {/* <VscFolder /> */}\n            </>\n          ) : (\n            <VscFile />\n          )}\n          <label>{explorerData.name}</label>\n        </span>\n      </div>\n\n      {/* Recursively render children if item is an expanded folder */}\n      {explorerData.isFolder && expand && (\n        <div className=\"file-explorer-children\" id=\"folderContainer\">\n          {/* Map through and render each child item */}\n          {explorerData.items.map((item, index) => (\n            <FileExplorerRenderer\n              key={index}\n              explorerData={{\n                ...item,\n                // Construct full path by combining parent path with item name\n                path: `${explorerData.path}/${item.name}`,\n              }}\n              currentPath={currentPath}\n              onFolderClick={onFolderClick}\n              onFileClick={onFileClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FileExplorerRenderer;\n","/**\n * MarkdownRenderer Component\n *\n * This component is responsible for rendering markdown content to HTML.\n * It takes a markdown string as input and renders it using various plugins\n * to support features like GitHub Flavored Markdown (GFM), math equations,\n * syntax highlighting, and raw HTML.\n *\n * Props:\n * - markdownContent: String containing the markdown content to be rendered.\n *\n * Features:\n * - Supports GitHub Flavored Markdown (GFM) for tables, strikethrough, etc.\n * - Renders math equations using KaTeX.\n * - Highlights code blocks using react-syntax-highlighter.\n * - Supports raw HTML rendering.\n * - Handles smooth scrolling to footnotes.\n * - Resolves relative image paths to be relative to the public folder.\n * - Makes LaTeX blocks scrollable if they are too wide.\n *\n * TODO:\n * 1. Add clickable checkboxes.\n * 2. Add support for Mermaid diagrams.\n * 3. Add a report button for reporting mistakes in markdown files.\n * 4. Add a button to copy code blocks.\n * 5. Add functionality to convert markdown to PDF.\n */\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\nimport rehypeRaw from \"rehype-raw\";\nimport rehypeKatex from \"rehype-katex\";\nimport remarkMath from \"remark-math\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { xcode } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\n// import rehypeMermaid from 'rehype-mermaid';\n// import remarkMermaid from 'remark-mermaid';\n\nimport \"katex/dist/katex.min.css\";\nimport \"../styles/MarkdownRenderer.css\";\n// import 'mermaid/dist/mermaid.esm.min.mjs';\n\nconst MarkdownRenderer = ({ markdownContent }) => {\n  // get current url to make the footnotes clickable\n  const location = useLocation();\n  const getCurrentUrl = () => {\n    return `${window.location.origin}${location.pathname}${location.hash}`;\n  };\n\n  // scroll to footnotes and scroll back smoothly\n  const handleSmoothScroll = (id) => {\n    const element = document.getElementById(id);\n    if (element) {\n      element.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  // make relative path import to correct path relative to public folder on deployment\n  const resolveRelativePath = (base, relative) => {\n    const stack = base.split(\"/\");\n    const parts = relative.split(\"/\");\n    stack.pop();\n    for (let i = 0; i < parts.length; i++) {\n      if (parts[i] === \".\") continue;\n      if (parts[i] === \"..\") stack.pop();\n      else stack.push(parts[i]);\n    }\n    return stack.join(\"/\");\n  };\n\n  // make the checkbox can be checked or unchecked\n  // const [checkboxStates, setCheckboxStates] = useState({});\n  // const handleCheckboxChange = (event) => {\n  //     console.log(event.target.checked);\n  // }\n  // const handleCheckboxChange = (event, index) => {\n  //     setCheckboxStates({\n  //         ...checkboxStates,\n  //         [index]: event.target.checked,\n  //     });\n  //     console.log(event.target.checked);\n  // };\n  // const handleCheckboxChange = (event, index) => {\n  //   setCheckboxStates((prevStates) => ({\n  //     ...prevStates,\n  //     [index]: !prevStates[index],\n  //   }));\n  //   console.log(event.target.checked);\n  //   console.log(index);\n  // };\n\n  return (\n    <div className=\"markdown-container\">\n      <div id=\"write\">\n        <ReactMarkdown\n          className=\"markdown-body\"\n          remarkPlugins={[remarkGfm, remarkMath]}\n          rehypePlugins={[rehypeRaw, rehypeKatex]}\n          components={{\n            // make the code block formatted and syntax highlighted\n            pre({ node, className, children, ...props }) {\n              const codeNode = node.children[0];\n              const match = /language-(\\w+)/.exec(\n                codeNode?.properties?.className || \"\"\n              );\n              return match ? (\n                <SyntaxHighlighter\n                  style={xcode}\n                  language={match[1]}\n                  PreTag=\"pre\"\n                  {...props}\n                >\n                  {String(codeNode.children[0].value).replace(/\\n$/, \"\")}\n                </SyntaxHighlighter>\n              ) : (\n                <pre className=\"md-fences\" {...props}>\n                  {children}\n                </pre>\n              );\n            },\n\n            // make the footnote link clickable and scroll to the footnote\n            a({ node, ...props }) {\n              if (\n                props.href &&\n                (props.href.startsWith(\"#user-content-fn-\") ||\n                  props.href.startsWith(\"#user-content-fnref-\"))\n              ) {\n                const currentUrl = getCurrentUrl();\n                return (\n                  <a\n                    {...props}\n                    href={`${currentUrl}${props.href}`}\n                    onClick={(event) => {\n                      event.preventDefault();\n                      handleSmoothScroll(props.href.substring(1));\n                    }}\n                  >\n                    {props.children.length === 0 ? \"Link\" : props.children}\n                  </a>\n                );\n              }\n              return (\n                <a {...props}>\n                  {props.children.length === 0 ? \"Link\" : props.children}\n                </a>\n              );\n            },\n\n            // make the image path correct for relative import\n            img({ node, ...props }) {\n              if (props.src && !props.src.startsWith(\"http\")) {\n                const src = resolveRelativePath(\n                  window.location.hash.replace(\"#/\", \"\"),\n                  props.src\n                );\n                console.log(src);\n                return <img {...props} src={src} />;\n              }\n              return <img {...props} />;\n            },\n\n            // for latex block that is too wide, make it scrollable\n            span({ node, ...props }) {\n              if (\n                props.className &&\n                props.className.includes(\"katex-display\")\n              ) {\n                return (\n                  <span\n                    {...props}\n                    style={{\n                      ...props.style,\n                      overflowX: \"auto\",\n                    }}\n                  >\n                    {props.children}\n                  </span>\n                );\n              }\n              return <span {...props}>{props.children}</span>;\n            },\n\n            // check box try 1\n            // input({ node, ...props }) {\n            //   if (props.type === \"checkbox\") {\n            //     const index =\n            //       node && node.position && node.position.start\n            //         ? node.position.start.offset\n            //         : null;\n            //     return (\n            //       <input\n            //         type=\"checkbox\"\n            //         {...props}\n            //         disabled={false}\n            //         checked={checkboxStates[index] || false}\n            //         onChange={(event) => handleCheckboxChange(event, index)}\n            //       />\n            //     );\n            //   }\n            //   return <input {...props} />;\n            // },\n\n            // check box try 2\n            //     input({ node, ...props }) {\n            //         console.log(node.position);\n            //         if (props.type === 'checkbox') {\n            //             const index = node && node.position && node.position.start ? node.position.start.offset : null;\n            //             return <input type=\"checkbox\" {...props} disabled={false} checked={checkboxStates[index] || false} onChange={(event) => handleCheckboxChange(event, index)}/>;\n            //         }\n            //         return <input {...props} />;\n            //     },\n          }}\n        >\n          {markdownContent}\n        </ReactMarkdown>\n      </div>\n    </div>\n  );\n};\n\nexport default MarkdownRenderer;\n","/**\n * useNotes Hook\n *\n * This custom hook is responsible for managing the state and logic related to\n * fetching and displaying notes from a GitHub repository. It handles fetching\n * the file tree and the content of individual files, and provides functions\n * to update the current path.\n *\n * Parameters:\n * - initialPath: String representing the initial path to be loaded.\n *\n * State:\n * - fileTree: Object containing the structure of the file tree.\n * - currentContent: String containing the content of the currently selected file.\n * - currentPath: String representing the current selected path.\n * - isLoading: Boolean indicating whether data is being loaded.\n * - error: String containing any error message encountered during fetching.\n *\n * Functions:\n * - setCurrentPath: Function to update the current path and fetch the corresponding content.\n *\n * Usage:\n * const { fileTree, currentContent, isLoading, error, setCurrentPath } = useNotes();\n *\n * Example:\n * const { fileTree, currentContent, isLoading, error, setCurrentPath } = useNotes(\"notes/README.md\");\n *\n */\nimport { useState, useEffect, useMemo } from \"react\";\nimport { GITHUB_CONFIG } from \"../../../utils/Constants\";\nimport { GitHubService } from \"../../../services/GitHub\";\n\nexport function useNotes(initialPath = \"disclaimer\") {\n  const [state, setState] = useState({\n    fileTree: null,\n    currentContent: null,\n    currentPath: initialPath,\n    isLoading: true,\n    error: null,\n  });\n\n  // create GitHub service instance once\n  const githubService = useMemo(\n    () =>\n      new GitHubService(\n        GITHUB_CONFIG.owner,\n        GITHUB_CONFIG.repo,\n        GITHUB_CONFIG.branch,\n        GITHUB_CONFIG.basePath,\n        process.env.REACT_APP_GITHUB_TOKEN\n      ),\n    []\n  ); // empty dependency array as these values won't change\n\n  // fetch file tree only once when component mounts\n  useEffect(() => {\n    const fetchFileTree = async () => {\n      try {\n        const tree = await githubService.getAllNotes();\n        setState((prev) => ({ ...prev, fileTree: tree, isLoading: false }));\n      } catch (error) {\n        setState((prev) => ({\n          ...prev,\n          error: \"Failed to load file structure\",\n          isLoading: false,\n        }));\n      }\n    };\n\n    fetchFileTree();\n  }, []); // empty dependency array as this effect should run only once\n\n  // fetch file content when path changes\n  useEffect(() => {\n    const fetchContent = async () => {\n      if (!state.currentPath) return;\n\n      setState((prev) => ({ ...prev, isLoading: true }));\n      try {\n        const content = await githubService.getFileContent(state.currentPath);\n        setState((prev) => ({\n          ...prev,\n          currentContent: content,\n          isLoading: false,\n        }));\n      } catch (error) {\n        setState((prev) => ({\n          ...prev,\n          error: \"Failed to load file content\",\n          isLoading: false,\n        }));\n      }\n    };\n\n    fetchContent();\n  }, [state.currentPath]);\n\n  // function to update the current path\n  const setCurrentPath = (path) => {\n    setState((prev) => ({ ...prev, currentPath: path }));\n  };\n\n  return {\n    ...state,\n    setCurrentPath,\n  };\n}\n","import React from \"react\";\nimport { GitHubService } from \"../../../services/GitHub\";\nimport { GITHUB_CONFIG } from \"../../../utils/Constants\";\nimport MarkdownRenderer from \"../components/MarkdownRenderer\";\nimport FileExplorerRenderer from \"../components/FileExplorerRenderer\";\nimport { useNotes } from \"../hooks/useNotes\";\n\nconst TestPage = () => {\n  const [debugInfo, setDebugInfo] = React.useState({\n    treeData: null,\n    fileContent: null,\n    currentPath: null,\n    error: null,\n  });\n\n  // Test useNotes.js\n  const { fileTree, currentContent, isLoading, error, setCurrentPath } =\n    useNotes();\n\n  // Test GitHub Service\n  React.useEffect(() => {\n    const testGitHubService = async () => {\n      const github = new GitHubService(\n        GITHUB_CONFIG.owner,\n        GITHUB_CONFIG.repo,\n        GITHUB_CONFIG.branch,\n        GITHUB_CONFIG.basePath,\n        process.env.REACT_APP_GITHUB_TOKEN\n      );\n\n      try {\n        const tree = await github.getAllNotes();\n        console.log(\"Test File Tree:\", tree);\n\n        // Test getting a specific file\n        // const testFilePath = \"/notes/stat/distribution.md\"; // or any existing file path\n        // const testFilePath = \"/notes/README.md\";\n        const testFilePath = \"notes/csci/code-block-test.md\";\n        // const testFilePath = \"notes/csci\";\n        const fileContent = await github.getFileContent(testFilePath);\n        // console.log(\"File Content Result:\", fileContent);\n\n        setCurrentPath(testFilePath);\n\n        setDebugInfo((prev) => ({\n          ...prev,\n          treeData: tree,\n          fileContent: fileContent,\n          currentPath: testFilePath,\n          error: null,\n        }));\n      } catch (err) {\n        console.error(\"GitHub Service Test Error:\", err);\n        setDebugInfo((prev) => ({\n          ...prev,\n          error: err.message,\n        }));\n      }\n    };\n\n    testGitHubService();\n  }, []);\n\n  // console.log(\"currentContent:\", currentContent);\n  console.log(\"debugInfo.currentPath:\", debugInfo.currentPath);\n\n  return (\n    <div\n      style={{\n        padding: \"20px\",\n        backgroundColor: \"#f5f5f5\",\n      }}\n    >\n      <div>\n        <h1 style={{ textAlign: \"center\" }}>Test Page</h1>\n        <h4>File Explorer:</h4>\n        <FileExplorerRenderer\n          explorerData={fileTree}\n          currentPath={debugInfo.currentPath}\n        />\n        <h4>File Content:</h4>\n        <MarkdownRenderer markdownContent={currentContent} />\n        {/* <MarkdownRenderer markdownContent={debugInfo.fileContent} /> */}\n        <h4>File Tree Sample:</h4>\n        <div style={{ maxHeight: \"300px\", overflow: \"auto\" }}>\n          <pre>\n            {debugInfo.treeData\n              ? JSON.stringify(debugInfo.treeData.items.slice(0, 3), null, 2)\n              : \"Loading...\"}\n          </pre>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TestPage;\n","/**\n * GitHubService Class\n *\n * This class centralizes all GitHub API calls. It handles fetching the file tree\n * and the content of individual files from a GitHub repository. It also provides\n * utility functions to transform the file tree into a hierarchical structure.\n *\n * Constructor Parameters:\n * - owner: String representing the GitHub repository owner.\n * - repo: String representing the GitHub repository name.\n * - branch: String representing the branch name.\n * - base_path: String representing the base path for the notes.\n * - auth: String representing the GitHub authentication token.\n *\n * Methods:\n * - transformGitHubTree: Transforms a flat GitHub tree into a hierarchical structure.\n * - getAllNotes: Fetches the entire file tree from the GitHub repository.\n * - isValidPath: Checks if a given path is valid.\n * - getFileContent: Fetches the content of a file from the GitHub repository.\n *\n * TODO:\n * 1. Add inventory functionality.\n * 2. Test the getFileContent method.\n */\nimport { Octokit } from \"@octokit/core\";\nimport { GITHUB_CONFIG } from \"../utils/Constants\";\n\n// centralize all GitHub API calls\nexport class GitHubService {\n  constructor(\n    owner = GITHUB_CONFIG.owner,\n    repo = GITHUB_CONFIG.repo,\n    branch = GITHUB_CONFIG.branch,\n    base_path = GITHUB_CONFIG.basePath,\n    auth = process.env.REACT_APP_GITHUB_TOKEN\n  ) {\n    this.owner = owner;\n    this.repo = repo;\n    this.branch = branch;\n    this.base_path = base_path;\n    this.octokit = new Octokit({\n      auth: auth,\n    });\n  }\n\n  /**\n   * Transforms a flat GitHub tree into a hierarchical structure.\n   * @param {Array} tree - The flat GitHub tree.\n   * @returns {Object} - The hierarchical tree structure.\n   */\n  transformGitHubTree(tree) {\n    // if want any order or inventory, add here\n    const root = {\n      name: \"notes\",\n      path: this.base_path,\n      items: [],\n      isFolder: true,\n    };\n    const map = { \"\": root };\n\n    tree.forEach((item) => {\n      if (!item.path.startsWith(this.base_path)) return;\n\n      const path = item.path.replace(this.base_path, \"\");\n      const parts = path.split(\"/\");\n      let currentPath = \"\";\n\n      parts.forEach((part, index) => {\n        const isLast = index === parts.length - 1;\n        const parentPath = currentPath;\n        currentPath = currentPath ? `${currentPath}/${part}` : part;\n\n        if (!map[currentPath]) {\n          const node = {\n            name: part,\n            path: `${this.base_path}${currentPath}`,\n            isFolder: !isLast || item.type === \"tree\",\n            items: [],\n          };\n          map[currentPath] = node;\n          map[parentPath].items.push(node);\n        }\n      });\n    });\n\n    return root;\n  }\n\n  /**\n   * Fetches the entire file tree from the GitHub repository.\n   * @returns {Object} - The hierarchical file tree structure.\n   */\n  async getAllNotes() {\n    try {\n      const response = await this.octokit.request(\n        \"GET /repos/{owner}/{repo}/git/trees/{branch}?recursive=1\",\n        {\n          owner: this.owner,\n          repo: this.repo,\n          branch: this.branch,\n          recursive: true,\n        }\n      );\n      console.log(\"fetching file tree\");\n\n      return this.transformGitHubTree(response.data.tree);\n    } catch (error) {\n      console.error(\"Error fetching notes:\", error);\n      return [];\n    }\n  }\n\n  /**\n   * Checks if a given path is valid.\n   * @param {String} path - The path to check.\n   * @returns {Boolean} - True if the path is valid, false otherwise.\n   */\n  async isValidPath(path) {\n    try {\n      const response = await fetch(`${path}`);\n      const text = await response.text();\n      return !text.includes(\"<!DOCTYPE html>\");\n    } catch (error) {\n      console.error(\"Error validating path:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Fetches the content of a file from the GitHub repository.\n   * @param {String} path - The path of the file to fetch.\n   * @returns {String} - The content of the file.\n   */\n  async getFileContent(path) {\n    // check whether the path is valid, if not, display the default file\n    const defaultPath = `notes/disclaimer.md`;\n    const validPath = (await this.isValidPath(path)) ? path : defaultPath;\n\n    try {\n      const response = await fetch(`${validPath}`);\n      if (!response.ok) {\n        throw new Error(`Error fetching file: ${response.statusText}`);\n      }\n      const text = await response.text();\n      return text;\n    } catch (error) {\n      console.error(\"Error fetching file from public folder:\", error);\n      return null;\n    }\n  }\n\n  // async getFileContent(path) {\n  //   try {\n  //     const response = await this.octokit.request(\n  //       \"GET /repos/{owner}/{repo}/contents/{path}\",\n  //       {\n  //         owner: this.owner,\n  //         repo: this.repo,\n  //         path: path,\n  //       }\n  //     );\n\n  //     return atob(response.data.content);\n  //   } catch (error) {\n  //     console.error(\"Error fetching file:\", error);\n  //     return null;\n  //   }\n  // }\n}\n","export const GITHUB_CONFIG = {\n  owner: \"Gavin-OP\",\n  repo: \"Gavin-OP.github.io\",\n  branch: \"gh-pages\",\n  basePath: \"notes\",\n};\n\nexport const MARKDOWN_CONFIG = {\n  extensions: [\".md\"],\n  defaultFile: \"disclaimer.md\",\n};\n"],"names":["FileExplorerRenderer","_ref","explorerData","currentPath","onFileClick","onFolderClick","expand","setExpand","useState","hasExpanded","setHasExpanded","useEffect","startsWith","path","itemStyle","fontWeight","_jsxs","children","_jsx","className","isFolder","onClick","e","stopPropagation","style","_Fragment","VscChevronDown","VscChevronRight","VscFile","name","id","items","map","item","index","markdownContent","location","useLocation","ReactMarkdown","remarkPlugins","remarkGfm","remarkMath","rehypePlugins","rehypeRaw","rehypeKatex","components","pre","_ref2","_codeNode$properties","node","props","codeNode","match","exec","properties","SyntaxHighlighter","xcode","language","PreTag","String","value","replace","a","_ref3","href","currentUrl","window","origin","pathname","hash","event","preventDefault","element","document","getElementById","scrollIntoView","behavior","handleSmoothScroll","substring","length","img","_ref4","src","resolveRelativePath","base","relative","stack","split","parts","pop","i","push","join","console","log","span","_ref5","includes","overflowX","useNotes","initialPath","arguments","undefined","state","setState","fileTree","currentContent","isLoading","error","githubService","useMemo","GitHubService","GITHUB_CONFIG","owner","repo","branch","basePath","process","REACT_APP_GITHUB_TOKEN","async","tree","getAllNotes","prev","fetchFileTree","content","getFileContent","fetchContent","setCurrentPath","TestPage","debugInfo","setDebugInfo","React","treeData","fileContent","github","testFilePath","err","message","testGitHubService","padding","backgroundColor","textAlign","MarkdownRenderer","maxHeight","overflow","JSON","stringify","slice","constructor","base_path","auth","this","octokit","Octokit","transformGitHubTree","root","forEach","part","isLast","parentPath","type","response","request","recursive","data","isValidPath","fetch","text","validPath","ok","Error","statusText"],"sourceRoot":""}