{"version":3,"file":"static/js/484.d6c48a79.chunk.js","mappings":"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","sources":["features/notes/components/FileExplorerRenderer.js","features/notes/components/MarkdownRenderer.js","features/notes/pages/TestPage.js","features/notes/hooks/useNotes.js","services/GitHub.js","utils/Constants.js"],"sourcesContent":["// TODO\n// 1. Do not show .md extension\n// 2. Where should I put the onclick logic?\n// 3. how should we deal with current path?\nimport { useState } from \"react\";\nimport {\n  VscChevronRight,\n  VscChevronDown,\n  VscFolder,\n  VscFile,\n} from \"react-icons/vsc\";\nimport \"../styles/FileExplorerRenderer.css\";\n\nconst FileExplorerRenderer = ({\n  explorerData,\n  currentPath,\n  onFileClick,\n  onFolderClick,\n}) => {\n  const [expand, setExpand] = useState(false);\n\n  // if explorerData is null or undefined, return null\n  if (!explorerData) {\n    console.log(\"explorerData\", explorerData);\n    return null;\n  }\n\n  console.log(\"explorerData\", explorerData);\n  console.log(\"currentPath in FileExplorerRenderer: \", currentPath);\n\n  const handleClick = (e) => {\n    e.stopPropagation();\n    if (explorerData.isFolder) {\n      setExpand(!expand);\n      console.log(\"Folder Clicked: \", explorerData.path);\n      // onFolderClick && onFolderClick(explorerData.path);\n    } else {\n      console.log(\"File Clicked: \", explorerData.path);\n      // onFileClick && onFileClick(explorerData.path);\n    }\n  };\n\n  const isCurrentPath = explorerData.path === currentPath;\n  console.log(\"isCurrentPath: \", isCurrentPath);\n\n  const itemStyle = { fontWeight: isCurrentPath ? \"bold\" : \"normal\" };\n\n  return (\n    <div>\n      <div\n        className={`file-explorer-item ${\n          explorerData.isFolder ? \"folder\" : \"folder\"\n        }`}\n        onClick={handleClick}\n        style={itemStyle}\n      >\n        <span className=\"file-explorer-icon-label\" style={itemStyle}>\n          {explorerData.isFolder ? (\n            <>\n              {expand ? <VscChevronDown /> : <VscChevronRight />}\n              {/* <VscFolder /> */}\n            </>\n          ) : (\n            <VscFile />\n          )}\n          <label>{explorerData.name}</label>\n        </span>\n      </div>\n\n      {/* Recursively render children if item is an expanded folder */}\n      {explorerData.isFolder && expand && (\n        <div className=\"file-explorer-children\" id=\"folderContainer\">\n          {/* Map through and render each child item */}\n          {explorerData.items.map((item, index) => (\n            <FileExplorerRenderer\n              key={index}\n              explorerData={{\n                ...item,\n                // Construct full path by combining parent path with item name\n                path: `${explorerData.path}/${item.name}`,\n              }}\n              currentPath={currentPath}\n              onFolderClick={onFolderClick}\n              onFileClick={onFileClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n\n  //     if (explorerData.isFolder) {\n  //         // render folder component\n  //         return (\n  //             <div>\n  //                 {/* display folder expand icon, folder icon, and folder name */}\n  //                 <div\n  //                     className=\"folder\"\n  //                     style={{ cursor: \"pointer\" }}\n  //                     onClick={() => setExpand(!expand)}\n  //                 >\n  //                     <span>\n  //                         {expand ? <VscChevronDown /> : <VscChevronRight />}\n  //                         {/* <VscFolder /> */}\n  //                         <label>{explorerData.name}</label>\n  //                     </span>\n  //                 </div>\n\n  //                 {/* if expand the folder, then render the content inside the folder */}\n  //                 <div\n  //                     id=\"folderContainer\"\n  //                     style={{ display: expand ? \"block\" : \"none\", marginLeft: 15 }}\n  //                 >\n  //                     {explorerData.items.map((item, index) => {\n  //                         console.log(explorerData);\n  //                         return (\n  //                             <FileExplorer\n  //                                 explorerData={item}\n  //                                 key={index}\n  //                                 onFolderClick={onFolderClick}\n  //                                 onFileClick={onFileClick}\n  //                             />\n  //                         );\n  //                     })}\n  //                 </div>\n  //             </div>\n  //         );\n\n  //     } else {\n  //         // render file component\n  //         return (\n  //             <div className=\"folder\">\n  //                 <span>\n  //                     <VscFile />\n  //                     <label>{explorerData.name}</label>\n  //                 </span>\n  //             </div>\n  //         );\n  //     }\n};\n\nexport default FileExplorerRenderer;\n","// This is a file to render the markdown file to HTML.\n// It takes the Markdown file string as input and renders it to HTML.\n// TODO\n// 1. Add the clickable checkbox\n// 2. Add support for Mermaid\n// 3. Add a report button for the markdown files, so that can report mistakes\n// 4. add a button to copy the code in the markdown file\n// 5. Convert the markdown file to pdf\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport { useLocation } from \"react-router-dom\";\nimport remarkGfm from \"remark-gfm\";\nimport rehypeRaw from \"rehype-raw\";\nimport rehypeKatex from \"rehype-katex\";\nimport remarkMath from \"remark-math\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { xcode } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\n// import rehypeMermaid from 'rehype-mermaid';\n// import remarkMermaid from 'remark-mermaid';\n\nimport \"katex/dist/katex.min.css\";\nimport \"../styles/MarkdownRenderer.css\";\n// import 'mermaid/dist/mermaid.esm.min.mjs';\n\nconst MarkdownRenderer = ({ markdownContent }) => {\n  const location = useLocation();\n  // const [checkboxStates, setCheckboxStates] = useState({});\n\n  // scroll to footnotes and scroll back\n  const handleSmoothScroll = (id) => {\n    const element = document.getElementById(id);\n    if (element) {\n      element.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  // get current url for footnotes\n  const getCurrentUrl = () => {\n    return `${window.location.origin}${location.pathname}${location.hash}`;\n  };\n\n  // make relative path import to correct path relative to public folder\n  const resolveRelativePath = (base, relative) => {\n    const stack = base.split(\"/\");\n    const parts = relative.split(\"/\");\n    stack.pop();\n    for (let i = 0; i < parts.length; i++) {\n      if (parts[i] === \".\") continue;\n      if (parts[i] === \"..\") stack.pop();\n      else stack.push(parts[i]);\n    }\n    return stack.join(\"/\");\n  };\n\n  // make the checkbox can be checked or unchecked\n  // const handleCheckboxChange = (event) => {\n  //     console.log(event.target.checked);\n  // }\n  // const handleCheckboxChange = (event, index) => {\n  //     setCheckboxStates({\n  //         ...checkboxStates,\n  //         [index]: event.target.checked,\n  //     });\n  //     console.log(event.target.checked);\n  // };\n  // const handleCheckboxChange = (event, index) => {\n  //   setCheckboxStates((prevStates) => ({\n  //     ...prevStates,\n  //     [index]: !prevStates[index],\n  //   }));\n  //   console.log(event.target.checked);\n  //   console.log(index);\n  // };\n\n  return (\n    <div className=\"markdown-container\">\n      <div id=\"write\">\n        <ReactMarkdown\n          className=\"markdown-body\"\n          remarkPlugins={[remarkGfm, remarkMath]}\n          rehypePlugins={[rehypeRaw, rehypeKatex]}\n          // make the checkbox can be check or unchecked, use handleCheckBoxChange\n          // components={{\n          //     input({ node, ...props }) {\n          //         console.log(node.position);\n          //         if (props.type === 'checkbox') {\n          //             const index = node && node.position && node.position.start ? node.position.start.offset : null;\n          //             return <input type=\"checkbox\" {...props} disabled={false} checked={checkboxStates[index] || false} onChange={(event) => handleCheckboxChange(event, index)}/>;\n          //         }\n          //         return <input {...props} />;\n          //     },\n          // }}\n\n\n          components={{\n            // make the code block formatted\n            pre({ node, className, children, ...props }) {\n              const codeNode = node.children[0];\n              const match = /language-(\\w+)/.exec(\n                codeNode?.properties?.className || \"\"\n              );\n              return match ? (\n                <SyntaxHighlighter\n                  style={xcode}\n                  language={match[1]}\n                  PreTag=\"pre\"\n                  {...props}\n                >\n                  {String(codeNode.children[0].value).replace(/\\n$/, \"\")}\n                </SyntaxHighlighter>\n              ) : (\n                <pre className=\"md-fences\" {...props}>\n                  {children}\n                </pre>\n              );\n            },\n\n            // make the footnote link clickable\n            a({ node, ...props }) {\n              if (\n                props.href &&\n                (props.href.startsWith(\"#user-content-fn-\") ||\n                  props.href.startsWith(\"#user-content-fnref-\"))\n              ) {\n                const currentUrl = getCurrentUrl();\n                return (\n                  <a\n                    {...props}\n                    href={`${currentUrl}${props.href}`}\n                    onClick={(event) => {\n                      event.preventDefault();\n                      handleSmoothScroll(props.href.substring(1));\n                    }}\n                  >\n                    {props.children.length === 0 ? \"Link\" : props.children}\n                  </a>\n                );\n              }\n              return (\n                <a {...props}>\n                  {props.children.length === 0 ? \"Link\" : props.children}\n                </a>\n              );\n            },\n\n            // make the image path correct for relative import\n            img({ node, ...props }) {\n              if (props.src && !props.src.startsWith(\"http\")) {\n                const src = resolveRelativePath(\n                  window.location.hash.replace(\"#/\", \"\"),\n                  props.src\n                );\n                console.log(src);\n                return <img {...props} src={src} />;\n              }\n              return <img {...props} />;\n            },\n\n            // for latex block that is too wide, make it scrollable\n            span({ node, ...props }) {\n              if (\n                props.className &&\n                props.className.includes(\"katex-display\")\n              ) {\n                return (\n                  <span\n                    {...props}\n                    style={{\n                      ...props.style,\n                      overflowX: \"auto\",\n                    }}\n                  >\n                    {props.children}\n                  </span>\n                );\n              }\n              return <span {...props}>{props.children}</span>;\n            },\n\n            // check box\n            // input({ node, ...props }) {\n            //   if (props.type === \"checkbox\") {\n            //     const index =\n            //       node && node.position && node.position.start\n            //         ? node.position.start.offset\n            //         : null;\n            //     return (\n            //       <input\n            //         type=\"checkbox\"\n            //         {...props}\n            //         disabled={false}\n            //         checked={checkboxStates[index] || false}\n            //         onChange={(event) => handleCheckboxChange(event, index)}\n            //       />\n            //     );\n            //   }\n            //   return <input {...props} />;\n            // },\n          }}\n        >\n          {markdownContent}\n        </ReactMarkdown>\n      </div>\n    </div>\n  );\n};\n\nexport default MarkdownRenderer;\n","import React from \"react\";\nimport { GitHubService } from \"../../../services/GitHub\";\nimport { GITHUB_CONFIG } from \"../../../utils/Constants\";\nimport MarkdownRenderer from \"../components/MarkdownRenderer\";\nimport FileExplorerRenderer from \"../components/FileExplorerRenderer\";\nimport { useNotes } from \"../hooks/useNotes\";\n\nconst TestPage = () => {\n  const [debugInfo, setDebugInfo] = React.useState({\n    treeData: null,\n    fileContent: null,\n    currentPath: null,\n    error: null,\n  });\n\n  // Test useNotes.js\n  const { fileTree, currentContent, isLoading, error, setCurrentPath } =\n    useNotes();\n\n  // Test GitHub Service\n  React.useEffect(() => {\n    const testGitHubService = async () => {\n      const github = new GitHubService(\n        GITHUB_CONFIG.owner,\n        GITHUB_CONFIG.repo,\n        GITHUB_CONFIG.branch,\n        GITHUB_CONFIG.basePath,\n        process.env.REACT_APP_GITHUB_TOKEN\n      );\n\n      try {\n        const tree = await github.getAllNotes();\n        console.log(\"Test File Tree:\", tree);\n\n        // Test getting a specific file\n        // const testFilePath = \"/notes/stat/distribution.md\"; // or any existing file path\n        // const testFilePath = \"/notes/README.md\";\n        const testFilePath = \"notes/csci/code-block-test.md\";\n        // const testFilePath = \"notes/csci\";\n        const fileContent = await github.getFileContent(testFilePath);\n        // console.log(\"File Content Result:\", fileContent);\n\n        setCurrentPath(testFilePath);\n\n        setDebugInfo((prev) => ({\n          ...prev,\n          treeData: tree,\n          fileContent: fileContent,\n          currentPath: testFilePath,\n          error: null,\n        }));\n      } catch (err) {\n        console.error(\"GitHub Service Test Error:\", err);\n        setDebugInfo((prev) => ({\n          ...prev,\n          error: err.message,\n        }));\n      }\n    };\n\n    testGitHubService();\n  }, []);\n\n  // console.log(\"currentContent:\", currentContent);\n  console.log(\"debugInfo.currentPath:\", debugInfo.currentPath);\n\n  return (\n    <div\n      style={{\n        padding: \"20px\",\n        backgroundColor: \"#f5f5f5\",\n      }}\n    >\n      <div>\n        <h1 style={{ textAlign: \"center\" }}>Test Page</h1>\n        <h4>File Explorer:</h4>\n        <FileExplorerRenderer\n          explorerData={fileTree}\n          currentPath={debugInfo.currentPath}\n        />\n        <h4>File Content:</h4>\n        <MarkdownRenderer markdownContent={currentContent} />\n        {/* <MarkdownRenderer markdownContent={debugInfo.fileContent} /> */}\n        <h4>File Tree Sample:</h4>\n        <div style={{ maxHeight: \"300px\", overflow: \"auto\" }}>\n          <pre>\n            {debugInfo.treeData\n              ? JSON.stringify(debugInfo.treeData.items.slice(0, 3), null, 2)\n              : \"Loading...\"}\n          </pre>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TestPage;\n","import { useState, useEffect, useMemo } from \"react\";\nimport { GitHubService } from \"../../../services/GitHub\";\nimport { GITHUB_CONFIG } from \"../../../utils/Constants\";\n\nexport function useNotes(initialPath = \"disclaimer\") {\n  const [state, setState] = useState({\n    fileTree: null,\n    currentContent: null,\n    currentPath: initialPath,\n    isLoading: true,\n    error: null,\n  });\n\n  // create GitHub service instance once\n  const githubService = useMemo(\n    () =>\n      new GitHubService(\n        GITHUB_CONFIG.owner,\n        GITHUB_CONFIG.repo,\n        GITHUB_CONFIG.branch,\n        GITHUB_CONFIG.basePath,\n        process.env.REACT_APP_GITHUB_TOKEN\n      ),\n    []\n  ); // empty dependency array as these values won't change\n\n  // fetch file tree only once when component mounts\n  useEffect(() => {\n    const fetchFileTree = async () => {\n      try {\n        const tree = await githubService.getAllNotes();\n        setState((prev) => ({ ...prev, fileTree: tree, isLoading: false }));\n      } catch (error) {\n        setState((prev) => ({\n          ...prev,\n          error: \"Failed to load file structure\",\n          isLoading: false,\n        }));\n      }\n    };\n\n    fetchFileTree();\n  }, []); // empty dependency array as this effect should run only once\n\n  // fetch file content when path changes\n  useEffect(() => {\n    const fetchContent = async () => {\n      if (!state.currentPath) return;\n\n      setState((prev) => ({ ...prev, isLoading: true }));\n      try {\n        const content = await githubService.getFileContent(state.currentPath);\n        setState((prev) => ({\n          ...prev,\n          currentContent: content,\n          isLoading: false,\n        }));\n      } catch (error) {\n        setState((prev) => ({\n          ...prev,\n          error: \"Failed to load file content\",\n          isLoading: false,\n        }));\n      }\n    };\n\n    fetchContent();\n  }, [state.currentPath]);\n\n  const setCurrentPath = (path) => {\n    setState((prev) => ({ ...prev, currentPath: path }));\n  };\n\n  return {\n    ...state,\n    setCurrentPath,\n  };\n}\n","// TODO\n// 1. inventory?\n// 2. test getFileContent\nimport { Octokit } from \"@octokit/core\";\nimport { GITHUB_CONFIG } from \"../utils/Constants\";\n\n// Centralize all GitHub API calls\nexport class GitHubService {\n  constructor(\n    owner = GITHUB_CONFIG.owner,\n    repo = GITHUB_CONFIG.repo,\n    branch = GITHUB_CONFIG.branch,\n    base_path = GITHUB_CONFIG.basePath,\n    auth = process.env.REACT_APP_GITHUB_TOKEN\n  ) {\n    this.owner = owner;\n    this.repo = repo;\n    this.branch = branch;\n    this.base_path = base_path;\n    this.octokit = new Octokit({\n      auth: auth,\n    });\n  }\n\n  transformGitHubTree(tree) {\n    // Transform flat tree into hierarchical structure\n    // if want any order or inventory, add here\n    const root = {\n      name: \"notes\",\n      path: this.base_path,\n      items: [],\n      isFolder: true,\n    };\n    const map = { \"\": root };\n\n    tree.forEach((item) => {\n      if (!item.path.startsWith(this.base_path)) return;\n\n      const path = item.path.replace(this.base_path, \"\");\n      const parts = path.split(\"/\");\n      let currentPath = \"\";\n\n      parts.forEach((part, index) => {\n        const isLast = index === parts.length - 1;\n        const parentPath = currentPath;\n        currentPath = currentPath ? `${currentPath}/${part}` : part;\n\n        if (!map[currentPath]) {\n          const node = {\n            name: part,\n            path: `${this.base_path}${currentPath}`,\n            isFolder: !isLast || item.type === \"tree\",\n            items: [],\n          };\n          map[currentPath] = node;\n          map[parentPath].items.push(node);\n        }\n      });\n    });\n\n    return root;\n  }\n\n  async getAllNotes() {\n    try {\n      const response = await this.octokit.request(\n        \"GET /repos/{owner}/{repo}/git/trees/{branch}?recursive=1\",\n        {\n          owner: this.owner,\n          repo: this.repo,\n          branch: this.branch,\n          recursive: true,\n        }\n      );\n      console.log(\"fetching file tree\");\n\n      return this.transformGitHubTree(response.data.tree);\n    } catch (error) {\n      console.error(\"Error fetching notes:\", error);\n      return [];\n    }\n  }\n\n  async isValidPath(path) {\n    try {\n      const response = await fetch(`${path}`);\n      const text = await response.text();\n      return !text.includes(\"<!DOCTYPE html>\");\n    } catch (error) {\n      console.error(\"Error validating path:\", error);\n      return false;\n    }\n  }\n\n  async getFileContent(path) {\n    // check whether the path is valid, if not, display the default file\n    const defaultPath = `notes/disclaimer.md`;\n    const validPath = (await this.isValidPath(path)) ? path : defaultPath;\n\n    try {\n      const response = await fetch(`${validPath}`);\n      if (!response.ok) {\n        throw new Error(`Error fetching file: ${response.statusText}`);\n      }\n      const text = await response.text();\n      return text;\n    } catch (error) {\n      console.error(\"Error fetching file from public folder:\", error);\n      return null;\n    }\n  }\n\n  // async getFileContent(path) {\n  //   try {\n  //     const response = await this.octokit.request(\n  //       \"GET /repos/{owner}/{repo}/contents/{path}\",\n  //       {\n  //         owner: this.owner,\n  //         repo: this.repo,\n  //         path: path,\n  //       }\n  //     );\n\n  //     return atob(response.data.content);\n  //   } catch (error) {\n  //     console.error(\"Error fetching file:\", error);\n  //     return null;\n  //   }\n  // }\n}\n","export const GITHUB_CONFIG = {\n    owner: 'Gavin-OP',\n    repo: 'Gavin-OP.github.io',\n    branch: 'gh-pages',\n    basePath: 'notes'\n};\n\nexport const MARKDOWN_CONFIG = {\n    extensions: ['.md'],\n    defaultFile: 'disclaimer.md'\n};"],"names":["FileExplorerRenderer","_ref","explorerData","currentPath","onFileClick","onFolderClick","expand","setExpand","useState","console","log","isCurrentPath","path","itemStyle","fontWeight","_jsxs","children","_jsx","className","isFolder","onClick","e","stopPropagation","style","_Fragment","VscChevronDown","VscChevronRight","VscFile","name","id","items","map","item","index","markdownContent","location","useLocation","ReactMarkdown","remarkPlugins","remarkGfm","remarkMath","rehypePlugins","rehypeRaw","rehypeKatex","components","pre","_ref2","_codeNode$properties","node","props","codeNode","match","exec","properties","SyntaxHighlighter","xcode","language","PreTag","String","value","replace","a","_ref3","href","startsWith","currentUrl","window","origin","pathname","hash","event","preventDefault","element","document","getElementById","scrollIntoView","behavior","handleSmoothScroll","substring","length","img","_ref4","src","resolveRelativePath","base","relative","stack","split","parts","pop","i","push","join","span","_ref5","includes","overflowX","TestPage","debugInfo","setDebugInfo","React","treeData","fileContent","error","fileTree","currentContent","isLoading","setCurrentPath","initialPath","arguments","undefined","state","setState","githubService","useMemo","GitHubService","GITHUB_CONFIG","owner","repo","branch","basePath","process","REACT_APP_GITHUB_TOKEN","useEffect","async","tree","getAllNotes","prev","fetchFileTree","content","getFileContent","fetchContent","useNotes","github","testFilePath","err","message","testGitHubService","padding","backgroundColor","textAlign","MarkdownRenderer","maxHeight","overflow","JSON","stringify","slice","constructor","base_path","auth","this","octokit","Octokit","transformGitHubTree","root","forEach","part","isLast","parentPath","type","response","request","recursive","data","isValidPath","fetch","text","validPath","ok","Error","statusText"],"sourceRoot":""}