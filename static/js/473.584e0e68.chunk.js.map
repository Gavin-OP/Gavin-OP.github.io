{"version":3,"file":"static/js/473.584e0e68.chunk.js","mappings":"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","sources":["features/notes/components/MarkdownRenderer.js","features/notes/pages/TestPage.js","services/GitHub.js","utils/Constants.js"],"sourcesContent":["// This is a file to render the markdown file to HTML.\n// It takes the Markdown file string as input and renders it to HTML.\n// TODO\n// 1. Add the clickable checkbox\n// 2. Add support for Mermaid\n// 3. Add a report button for the markdown files, so that can report mistakes\n// 4. add a button to copy the code in the markdown file\n// 5. Convert the markdown file to pdf\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport { useLocation } from \"react-router-dom\";\nimport remarkGfm from \"remark-gfm\";\nimport rehypeRaw from \"rehype-raw\";\nimport rehypeKatex from \"rehype-katex\";\nimport remarkMath from \"remark-math\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { xcode } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\n// import rehypeMermaid from 'rehype-mermaid';\n// import remarkMermaid from 'remark-mermaid';\n\nimport \"katex/dist/katex.min.css\";\nimport \"../styles/MarkdownRenderer.css\";\n// import 'mermaid/dist/mermaid.esm.min.mjs';\n\nconst MarkdownRenderer = ({ markdownContent }) => {\n  const location = useLocation();\n  // make the checkbox can be checked or unchecked\n  // const handleCheckboxChange = (event) => {\n  //     console.log(event.target.checked);\n  // }\n  // const handleCheckboxChange = (event, index) => {\n  //     setCheckboxStates({\n  //         ...checkboxStates,\n  //         [index]: event.target.checked,\n  //     });\n  //     console.log(event.target.checked);\n  // };\n  // const handleCheckboxChange = (event, index) => {\n  //     setCheckboxStates((prevStates) => ({\n  //         ...prevStates,\n  //         [index]: !prevStates[index],\n  //     }));\n  //     console.log(event.target.checked);\n  //     console.log(index)\n  // };\n\n  const handleSmoothScroll = (id) => {\n    const element = document.getElementById(id);\n    if (element) {\n      element.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  const getCurrentUrl = () => {\n    return `${window.location.origin}${location.pathname}${location.hash}`;\n  };\n\n  const resolveRelativePath = (base, relative) => {\n    const stack = base.split(\"/\");\n    const parts = relative.split(\"/\");\n    stack.pop();\n    for (let i = 0; i < parts.length; i++) {\n      if (parts[i] === \".\") continue;\n      if (parts[i] === \"..\") stack.pop();\n      else stack.push(parts[i]);\n    }\n    return stack.join(\"/\");\n  };\n\n  return (\n    <div className=\"markdown-container\">\n      <div id=\"write\">\n        <ReactMarkdown\n          className=\"markdown-body\"\n          remarkPlugins={[remarkGfm, remarkMath]}\n          rehypePlugins={[rehypeRaw, rehypeKatex]}\n          // make the checkbox can be check or unchecked, use handleCheckBoxChange\n          // components={{\n          //     input({ node, ...props }) {\n          //         console.log(node.position);\n          //         if (props.type === 'checkbox') {\n          //             const index = node && node.position && node.position.start ? node.position.start.offset : null;\n          //             return <input type=\"checkbox\" {...props} disabled={false} checked={checkboxStates[index] || false} onChange={(event) => handleCheckboxChange(event, index)}/>;\n          //         }\n          //         return <input {...props} />;\n          //     },\n          // }}\n\n          // make the checkbox disable is false\n          // components={{\n          //     input({ node, ...props }) {\n          //         if (props.type === 'checkbox') {\n          //             return <input type=\"checkbox\" {...props} disabled={false} />;\n          //         }\n          //         return <input {...props} />;\n          //     },\n          // }}\n\n          components={{\n            // pre({ node, className, children, ...props }) {\n            //     if (children[\"type\"] === \"code\") {\n            //         try {\n            //             const codeNode = children.children[0];\n            //             console.log(codeNode)\n            //             const match = children[\"props\"][\"className\"].match(/language-(\\w+)/)\n            //             return (\n\n            //                 <pre className='md-fences'>\n            //                     {children}\n            //                 </pre>\n            //             )\n            //         } catch (e) {\n            //             return (\n            //                 <pre className='md-fences'>\n            //                     {children}\n            //                 </pre>\n            //             )\n            //         }\n            //     }\n            // },\n\n            // make the code block formatted\n            pre({ node, className, children, ...props }) {\n              const codeNode = node.children[0];\n              const match = /language-(\\w+)/.exec(\n                codeNode?.properties?.className || \"\"\n              );\n              return match ? (\n                <SyntaxHighlighter\n                  style={xcode}\n                  language={match[1]}\n                  PreTag=\"pre\"\n                  {...props}\n                >\n                  {String(codeNode.children[0].value).replace(/\\n$/, \"\")}\n                </SyntaxHighlighter>\n              ) : (\n                <pre className=\"md-fences\" {...props}>\n                  {children}\n                </pre>\n              );\n            },\n\n            // make the footnote link clickable\n            a({ node, ...props }) {\n              if (\n                props.href &&\n                (props.href.startsWith(\"#user-content-fn-\") ||\n                  props.href.startsWith(\"#user-content-fnref-\"))\n              ) {\n                const currentUrl = getCurrentUrl();\n                return (\n                  <a\n                    {...props}\n                    href={`${currentUrl}${props.href}`}\n                    onClick={(event) => {\n                      event.preventDefault();\n                      handleSmoothScroll(props.href.substring(1));\n                    }}\n                  >\n                    {props.children.length === 0 ? \"Link\" : props.children}\n                  </a>\n                );\n              }\n              return (\n                <a {...props}>\n                  {props.children.length === 0 ? \"Link\" : props.children}\n                </a>\n              );\n            },\n\n            // make the image path correct for relative import\n            img({ node, ...props }) {\n              if (\n                props.src &&\n                (props.src.startsWith(\"/\") || props.src.startsWith(\".\"))\n              ) {\n                // const hashPath = window.location.hash.replace(\"#\", \"public\");\n                // if (props.src.startsWith(\"/\")) {\n                //   const src = `${hashPath}${props.src}`;\n                //   return <img {...props} src={src} />;\n                // } else if (props.src.startsWith(\".\")) {\n                //   const src = `${hashPath}/${props.src}`;\n                //   return <img {...props} src={src} />;\n                // }\n                const src = resolveRelativePath(\n                  window.location.hash.replace(\"#/\", \"\"),\n                  props.src\n                );\n                return <img {...props} src={src} />;\n              }\n              return <img {...props} />;\n            },\n\n\n          }}\n        >\n          {markdownContent}\n        </ReactMarkdown>\n      </div>\n    </div>\n  );\n};\n\nexport default MarkdownRenderer;\n","import React from \"react\";\nimport { GitHubService } from \"../../../services/GitHub\";\nimport { GITHUB_CONFIG } from \"../../../utils/Constants\";\nimport MarkdownRenderer from \"../components/MarkdownRenderer\";\n\nconst TestPage = () => {\n  const [debugInfo, setDebugInfo] = React.useState({\n    treeData: null,\n    fileContent: null,\n    error: null,\n  });\n\n  // Test GitHub Service\n  React.useEffect(() => {\n    const testGitHubService = async () => {\n      const github = new GitHubService(\n        GITHUB_CONFIG.owner,\n        GITHUB_CONFIG.repo,\n        GITHUB_CONFIG.branch,\n        GITHUB_CONFIG.basePath,\n        process.env.REACT_APP_GITHUB_TOKEN\n      );\n\n      try {\n        const tree = await github.getAllNotes();\n        console.log(\"Test File Tree:\", tree);\n\n        // Test getting a specific file\n        // const testFilePath = \"/notes/stat/distribution.md\"; // or any existing file path\n        const testFilePath = \"/notes/README.md\";\n        const fileContent = await github.getFileContent(testFilePath);\n        console.log(\"File Content Result:\", fileContent);\n\n        setDebugInfo({\n          treeData: tree,\n          fileContent: fileContent,\n          error: null,\n        });\n      } catch (err) {\n        console.error(\"GitHub Service Test Error:\", err);\n        setDebugInfo((prev) => ({\n          ...prev,\n          error: err.message,\n        }));\n      }\n    };\n\n    testGitHubService();\n  }, []);\n\n  return (\n    <div\n      style={{\n        padding: \"20px\",\n        backgroundColor: \"#f5f5f5\",\n      }}\n    >\n      <div>\n        <h1 style={{ textAlign: \"center\" }}>Test Page</h1>\n        <h4>File Tree Sample:</h4>\n        <div style={{ maxHeight: \"300px\", overflow: \"auto\" }}>\n          <pre>\n            {debugInfo.treeData\n              ? JSON.stringify(debugInfo.treeData.items.slice(0, 3), null, 2)\n              : \"Loading...\"}\n          </pre>\n        </div>\n        <h4>File Content:</h4>\n        <MarkdownRenderer markdownContent={debugInfo.fileContent} />\n      </div>\n    </div>\n  );\n};\n\nexport default TestPage;\n","// TODO\n// 1. inventory?\n// 2. test getFileContent\nimport { Octokit } from \"@octokit/core\";\nimport { GITHUB_CONFIG } from \"../utils/Constants\";\n\n// Centralize all GitHub API calls\nexport class GitHubService {\n  constructor(\n    owner = GITHUB_CONFIG.owner,\n    repo = GITHUB_CONFIG.repo,\n    branch = GITHUB_CONFIG.branch,\n    base_path = GITHUB_CONFIG.basePath,\n    auth = process.env.REACT_APP_GITHUB_TOKEN\n  ) {\n    this.owner = owner;\n    this.repo = repo;\n    this.branch = branch;\n    this.base_path = base_path;\n    this.octokit = new Octokit({\n      auth: auth,\n    });\n  }\n\n  transformGitHubTree(tree) {\n    // Transform flat tree into hierarchical structure\n    // if want any order or inventory, add here\n    const root = {\n      name: \"notes\",\n      path: this.base_path,\n      items: [],\n      isFolder: true,\n    };\n    const map = { \"\": root };\n\n    tree.forEach((item) => {\n      if (!item.path.startsWith(this.base_path)) return;\n\n      const path = item.path.replace(this.base_path, \"\");\n      const parts = path.split(\"/\");\n      let currentPath = \"\";\n\n      parts.forEach((part, index) => {\n        const isLast = index === parts.length - 1;\n        const parentPath = currentPath;\n        currentPath = currentPath ? `${currentPath}/${part}` : part;\n\n        if (!map[currentPath]) {\n          const node = {\n            name: part,\n            path: `${this.base_path}${currentPath}`,\n            isFolder: !isLast || item.type === \"tree\",\n            items: [],\n          };\n          map[currentPath] = node;\n          map[parentPath].items.push(node);\n        }\n      });\n    });\n\n    return root;\n  }\n\n  async getAllNotes() {\n    try {\n      const response = await this.octokit.request(\n        \"GET /repos/{owner}/{repo}/git/trees/{branch}?recursive=1\",\n        {\n          owner: this.owner,\n          repo: this.repo,\n          branch: this.branch,\n          recursive: true,\n        }\n      );\n\n      return this.transformGitHubTree(response.data.tree);\n    } catch (error) {\n      console.error(\"Error fetching notes:\", error);\n      return [];\n    }\n  }\n\n  async isValidPath(path) {\n    try {\n      const response = await fetch(`${path}`);\n      const text = await response.text();\n      return !text.includes(\"<!DOCTYPE html>\");\n    } catch (error) {\n      console.error(\"Error validating path:\", error);\n      return false;\n    }\n  }\n\n  async getFileContent(path) {\n    // check whether the path is valid, if not, display the default file\n    const defaultPath = `notes/disclaimer.md`;\n    const validPath = await this.isValidPath(path) ? path : defaultPath;\n\n    try {\n      const response = await fetch(`${validPath}`);\n      if (!response.ok) {\n        throw new Error(`Error fetching file: ${response.statusText}`);\n      }\n      const text = await response.text();\n      return text;\n    } catch (error) {\n      console.error(\"Error fetching file from public folder:\", error);\n      return null;\n    }\n  }\n\n  // async getFileContent(path) {\n  //   try {\n  //     const response = await this.octokit.request(\n  //       \"GET /repos/{owner}/{repo}/contents/{path}\",\n  //       {\n  //         owner: this.owner,\n  //         repo: this.repo,\n  //         path: path,\n  //       }\n  //     );\n\n  //     return atob(response.data.content);\n  //   } catch (error) {\n  //     console.error(\"Error fetching file:\", error);\n  //     return null;\n  //   }\n  // }\n}\n","export const GITHUB_CONFIG = {\n    owner: 'Gavin-OP',\n    repo: 'Gavin-OP.github.io',\n    branch: 'master',\n    basePath: 'public/notes/'\n};\n\nexport const MARKDOWN_CONFIG = {\n    extensions: ['.md'],\n    defaultFile: 'disclaimer.md'\n};"],"names":["_ref","markdownContent","location","useLocation","_jsx","className","children","id","ReactMarkdown","remarkPlugins","remarkGfm","remarkMath","rehypePlugins","rehypeRaw","rehypeKatex","components","pre","_ref2","_codeNode$properties","node","props","codeNode","match","exec","properties","SyntaxHighlighter","style","xcode","language","PreTag","String","value","replace","a","_ref3","href","startsWith","currentUrl","window","origin","pathname","hash","onClick","event","preventDefault","element","document","getElementById","scrollIntoView","behavior","handleSmoothScroll","substring","length","img","_ref4","src","resolveRelativePath","base","relative","stack","split","parts","pop","i","push","join","TestPage","debugInfo","setDebugInfo","React","treeData","fileContent","error","async","github","GitHubService","GITHUB_CONFIG","owner","repo","branch","basePath","process","REACT_APP_GITHUB_TOKEN","tree","getAllNotes","console","log","testFilePath","getFileContent","err","prev","message","testGitHubService","padding","backgroundColor","_jsxs","textAlign","maxHeight","overflow","JSON","stringify","items","slice","MarkdownRenderer","constructor","arguments","undefined","base_path","auth","this","octokit","Octokit","transformGitHubTree","root","name","path","isFolder","map","forEach","item","currentPath","part","index","isLast","parentPath","type","response","request","recursive","data","isValidPath","fetch","text","includes","validPath","ok","Error","statusText"],"sourceRoot":""}