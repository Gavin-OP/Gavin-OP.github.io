{"version":3,"file":"static/js/471.d6910331.chunk.js","mappings":"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","sources":["features/notes/components/MarkdownRenderer.js","features/notes/components/FileExplorer.js","features/notes/components/NotesMenu.js","features/notes/pages/NotesPage.js"],"sourcesContent":["// TODO\n// 1. Add the clickable checkbox\n// 2. Add support for Mermaid\n// 3. Add a menu for a lot of markdow files, like a side bar navigation\n// 4. Add a report button for the markdown files, so that can report mistakes\n// 5. add a button to copy the code in the markdown file\n// 6. Convert the markdown file to pdf\n// 7. Incorrect URL will be redirected to the disclaimer page\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { useLocation } from 'react-router-dom';\nimport remarkGfm from \"remark-gfm\";\nimport rehypeRaw from \"rehype-raw\";\nimport rehypeKatex from 'rehype-katex'\nimport remarkMath from 'remark-math';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { xcode } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n// import rehypeMermaid from 'rehype-mermaid';\n// import remarkMermaid from 'remark-mermaid';\n\nimport 'katex/dist/katex.min.css';\nimport '../styles/MarkdownRenderer.css';\n// import 'mermaid/dist/mermaid.esm.min.mjs';\n\n\n\nconst MarkdownRenderer = ({ filename }) => {\n    const [content, setContent] = useState('');\n    const location = useLocation();\n    // const [checkboxStates, setCheckboxStates] = useState({});\n\n    const fileToRender = filename === undefined ? 'disclaimer' : filename;\n\n    const fetchFile = useCallback((file) => {\n        fetch(`/notes/${file}.md`)\n            .then((response) => response.text())\n            .then((text) => {\n                // if (text.includes(\"<!DOCTYPE html>\")) {\n                //     console.log(`Failed to fetch file: /notes/${file}.md`);\n                //     throw new Error(`File not found: /notes/${file}.md`);\n                // }\n                setContent(text);\n            })\n            .catch((error) => {\n                console.error(error);\n                if (file !== 'disclaimer') {\n                    console.log(`Retrying with disclaimer.md`);\n                    fetchFile('disclaimer');\n                } else {\n                    console.log(`Failed to fetch file: /notes/${file}.md`);\n                }\n            });\n    }, []);\n\n    useEffect(() => {\n        fetchFile(fileToRender);\n    }, [fileToRender, fetchFile]);\n\n    // make the checkbox can be checked or unchecked\n    // const handleCheckboxChange = (event) => {\n    //     console.log(event.target.checked);\n    // }\n    // const handleCheckboxChange = (event, index) => {\n    //     setCheckboxStates({\n    //         ...checkboxStates,\n    //         [index]: event.target.checked,\n    //     });\n    //     console.log(event.target.checked);\n    // };\n    // const handleCheckboxChange = (event, index) => {\n    //     setCheckboxStates((prevStates) => ({\n    //         ...prevStates,\n    //         [index]: !prevStates[index],\n    //     }));\n    //     console.log(event.target.checked);\n    //     console.log(index)\n\n    // };\n\n\n    const handleSmoothScroll = (id) => {\n        const element = document.getElementById(id);\n        if (element) {\n            element.scrollIntoView({ behavior: 'smooth' });\n        }\n    };\n\n    const getCurrentUrl = () => {\n        return `${window.location.origin}${location.pathname}${location.hash}`;\n    };\n\n    return (\n        <div className=\"markdown-container\">\n            <div id=\"write\">\n                <ReactMarkdown\n                    className=\"markdown-body\"\n                    remarkPlugins={[remarkGfm, remarkMath]}\n                    rehypePlugins={[rehypeRaw, rehypeKatex]}\n\n                    // make the checkbox can be check or unchecked, use handleCheckBoxChange\n                    // components={{\n                    //     input({ node, ...props }) {\n                    //         console.log(node.position);\n                    //         if (props.type === 'checkbox') {\n                    //             const index = node && node.position && node.position.start ? node.position.start.offset : null;\n                    //             return <input type=\"checkbox\" {...props} disabled={false} checked={checkboxStates[index] || false} onChange={(event) => handleCheckboxChange(event, index)}/>;\n                    //         }\n                    //         return <input {...props} />;\n                    //     },\n                    // }}\n\n                    // make the checkbox disable is false\n                    // components={{\n                    //     input({ node, ...props }) {\n                    //         if (props.type === 'checkbox') {\n                    //             return <input type=\"checkbox\" {...props} disabled={false} />;\n                    //         }\n                    //         return <input {...props} />;\n                    //     },\n                    // }}\n\n\n\n                    components={{\n                        // pre({ node, className, children, ...props }) {\n                        //     if (children[\"type\"] === \"code\") {\n                        //         try {\n                        //             const codeNode = children.children[0];\n                        //             console.log(codeNode)\n                        //             const match = children[\"props\"][\"className\"].match(/language-(\\w+)/)\n                        //             return (\n\n                        //                 <pre className='md-fences'>\n                        //                     {children}\n                        //                 </pre>\n                        //             )\n                        //         } catch (e) {\n                        //             return (\n                        //                 <pre className='md-fences'>\n                        //                     {children}\n                        //                 </pre>\n                        //             )\n                        //         }\n                        //     }\n                        // },\n\n\n\n                        pre({ node, className, children, ...props }) {\n                            const codeNode = node.children[0];\n                            const match = /language-(\\w+)/.exec(codeNode?.properties?.className || '');\n                            return match ? (\n                                <SyntaxHighlighter\n                                    style={xcode}\n                                    language={match[1]}\n                                    PreTag=\"pre\"\n                                    {...props}\n                                >\n                                    {String(codeNode.children[0].value).replace(/\\n$/, '')}\n                                </SyntaxHighlighter>\n                            ) : (\n                                <pre className=\"md-fences\" {...props}>\n                                    {children}\n                                </pre>\n                            );\n                        },\n\n\n                        a({ node, ...props }) {\n                            if (props.href && (props.href.startsWith('#user-content-fn-') || props.href.startsWith('#user-content-fnref-'))) {\n                                const currentUrl = getCurrentUrl();\n                                return (\n                                    // <a\n                                    //     {...props}\n                                    //     href={`${currentUrl}${props.href}`}\n                                    //     onClick={(event) => {\n                                    //         event.preventDefault();\n                                    //         handleSmoothScroll(props.href.substring(1));\n                                    //     }}\n                                    // />\n                                    <a\n                                        {...props}\n                                        href={`${currentUrl}${props.href}`}\n                                        onClick={(event) => {\n                                            event.preventDefault();\n                                            handleSmoothScroll(props.href.substring(1));\n                                        }}\n                                    >\n                                        {props.children.length === 0 ? 'Link' : props.children}\n                                    </a>\n                                );\n                            }\n                            // return <a {...props} />;\n                            return <a {...props}>{props.children.length === 0 ? 'Link' : props.children}</a>;\n\n                        }\n\n\n                    }}\n\n                >\n                    {content}\n                </ReactMarkdown>\n            </div>\n        </div>\n    );\n};\n\nexport default MarkdownRenderer;","// TODO\n// 1. Do not show .md extension\nimport { useState } from \"react\";\nimport { VscChevronRight, VscChevronDown, VscFolder, VscFile, } from \"react-icons/vsc\";\nimport \"../styles/Folder.css\";\n\nconst FileExplorer = ({\n    explorerData,\n    onFolderClick,\n    onFileClick\n}) => {\n    const [expand, setExpand] = useState(false);\n\n    const handleClick = (e) => {\n        e.stopPropagation();\n        if (explorerData.isFolder) {\n            setExpand(!expand);\n            console.log(\"explorerData.path: \", explorerData.path);\n            // onFolderClick && onFolderClick(explorerData.path);\n        } else {\n            console.log(explorerData.path);\n            onFileClick && onFileClick(explorerData.path);\n        }\n    };\n\n    return (\n        // Main container for the file explorer item\n        <div>\n            {/* Item container with click handler and folder/file styling */}\n            <div\n                className={`file-explorer-item ${explorerData.isFolder ? 'folder' : 'folder'}`}\n                onClick={handleClick}\n            >\n                {/* Icon and label container */}\n                <span className=\"file-explorer-icon-label\">\n                    {explorerData.isFolder ? (\n                        <>\n                            {expand ? <VscChevronDown /> : <VscChevronRight />}\n                            {/* <VscFolder /> */}\n                        </>\n                    ) : (\n                        <VscFile />\n                    )}\n                    <label>{explorerData.name}</label>\n                </span>\n            </div>\n\n            {/* Recursively render children if item is an expanded folder */}\n            {explorerData.isFolder && expand && (\n                <div className=\"file-explorer-children\" id='folderContainer'>\n                    {/* Map through and render each child item */}\n                    {explorerData.items.map((item, index) => (\n                        <FileExplorer\n                            key={index}\n                            explorerData={{\n                                ...item,\n                                // Construct full path by combining parent path with item name\n                                path: `${explorerData.path}/${item.name}`\n                            }}\n                            onFolderClick={onFolderClick}\n                            onFileClick={onFileClick}\n                        />\n                    ))}\n                </div>\n            )}\n        </div>\n    );\n\n\n//     if (explorerData.isFolder) {\n//         // render folder component\n//         return (\n//             <div>\n//                 {/* display folder expand icon, folder icon, and folder name */}\n//                 <div\n//                     className=\"folder\"\n//                     style={{ cursor: \"pointer\" }}\n//                     onClick={() => setExpand(!expand)}\n//                 >\n//                     <span>\n//                         {expand ? <VscChevronDown /> : <VscChevronRight />}\n//                         {/* <VscFolder /> */}\n//                         <label>{explorerData.name}</label>\n//                     </span>\n//                 </div>\n\n//                 {/* if expand the folder, then render the content inside the folder */}\n//                 <div\n//                     id=\"folderContainer\"\n//                     style={{ display: expand ? \"block\" : \"none\", marginLeft: 15 }}\n//                 >\n//                     {explorerData.items.map((item, index) => {\n//                         console.log(explorerData);\n//                         return (\n//                             <FileExplorer\n//                                 explorerData={item}\n//                                 key={index}\n//                                 onFolderClick={onFolderClick}\n//                                 onFileClick={onFileClick}\n//                             />\n//                         );\n//                     })}\n//                 </div>\n//             </div>\n//         );\n\n//     } else {\n//         // render file component\n//         return (\n//             <div className=\"folder\">\n//                 <span>\n//                     <VscFile />\n//                     <label>{explorerData.name}</label>\n//                 </span>\n//             </div>\n//         );\n//     }\n};\n\nexport default FileExplorer;","// use https://api.github.com/repos/Gavin-OP/Gavin-OP.github.io/contents/public/file?ref=master to get the file list\n// https://api.github.com/repos/Gavin-OP/Gavin-OP.github.io/contents/<foldername>?ref=<branch_name>\n// TODO\n// 1. Render too slow\n// 2. Icon to display menu and close menu\n// 3. Identify folder and file\n// 4. Show the parent folder tree if click on a file\n\n\nimport React, { useState, useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { Octokit } from '@octokit/core';\nimport '../styles/NotesMenu.css';\nimport FileExplorer from './FileExplorer';\nimport { shadesOfPurple } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\n\n\nconst NotesMenu = ({ currentPath }) => {\n    const [files, setFiles] = useState([]);\n    const [fileContent, setFileContent] = useState(null);\n    const navigate = useNavigate();\n\n    // const octokit = useMemo(() => new Octokit({\n    //     auth: process.env.REACT_APP_GITHUB_TOKEN\n    // }), []);\n\n    // useEffect(() => {\n    //     const fetchFiles = async (path) => {\n    //         try {\n    //             const sanitizedPath = path.replace(/\\/$/, '');\n    //             const response = await octokit.request('GET /repos/{owner}/{repo}/contents/{path}?ref=master', {\n    //                 owner: 'Gavin-OP',\n    //                 repo: 'Gavin-OP.github.io',\n    //                 path: `public/notes${sanitizedPath}`,\n    //                 headers: {\n    //                     'X-GitHub-Api-Version': '2022-11-28',\n    //                     'Authorization': `token ${process.env.REACT_APP_GITHUB_TOKEN}` \n    //                 }\n    //             });\n\n\n    //             if (Array.isArray(response.data)) {\n    //                 setFiles(response.data);\n    //             } else {\n    //                 setFiles([]);\n    //             }\n    //         } catch (error) {\n    //             console.error('Error fetching files:', error);\n    //             setFiles([]);\n    //         }\n    //     };\n\n    //     fetchFiles(currentPath.replace('/notes', ''));\n    // }, [currentPath, octokit]);\n    useEffect(() => {\n        const fetchFiles = async (path) => {\n            const octokit = new Octokit({\n                auth: process.env.REACT_APP_GITHUB_TOKEN\n            });\n\n            try {\n                const sanitizedPath = path.replace(/\\/$/, '');\n                const response = await octokit.request('GET /repos/{owner}/{repo}/contents/{path}?ref=master', {\n                    owner: 'Gavin-OP',\n                    repo: 'Gavin-OP.github.io',\n                    path: `public/notes${sanitizedPath}`,\n                    headers: {\n                        'X-GitHub-Api-Version': '2022-11-28'\n                    }\n                });\n\n                if (Array.isArray(response.data)) {\n                    const transformedFiles = response.data.map(file => ({\n                        name: file.name.replace('.md', ''),\n                        path: file.path,\n                        isFolder: file.type === 'dir',\n                        items: [],\n                        sha: file.sha\n                    }));\n                    setFiles(transformedFiles);\n                }\n                console.log(files);\n            } catch (error) {\n                console.error('Error fetching files:', error);\n                setFiles([]);\n            }\n        };\n\n        fetchFiles(currentPath.replace('/notes', ''));\n    }, [currentPath]);\n\n\n    const handleFolderClick = (path) => {\n        console.log(\"path: \", path.replace('public/notes', ''));\n        navigate(`/notes/${path.replace('public/notes', '')}`);\n        // navigate(`/notes/csci/`);\n    };\n\n    const handleParentClick = () => {\n        const parentPath = currentPath.split('/').slice(0, -1).join('/');\n        navigate(parentPath);\n    };\n\n    const handleFileClick = async (path) => {\n        const octokit = new Octokit({\n            auth: process.env.REACT_APP_GITHUB_TOKEN\n        });\n\n        try {\n            const response = await octokit.request('GET /repos/{owner}/{repo}/contents/{path}?ref=master', {\n                owner: 'Gavin-OP',\n                repo: 'Gavin-OP.github.io',\n                path: path,\n                headers: {\n                    'X-GitHub-Api-Version': '2022-11-28'\n                }\n            });\n\n            if (response.data && response.data.content) {\n                const content = atob(response.data.content);\n                setFileContent(content);\n            } else {\n                setFileContent(null);\n            }\n        } catch (error) {\n            console.error('Error fetching file content:', error);\n            setFileContent(null);\n        }\n    };\n\n    const renderFiles = (files) => {\n        return (\n            <ul>\n                {currentPath !== '/notes' && (\n                    <li>\n                        <span onClick={handleParentClick}>\n                            .. (返回上一级)\n                        </span>\n                    </li>\n                )}\n                {files.map(file => (\n                    <li key={file.path}>\n                        {file.type === 'dir' ? (\n                            <span onClick={() => handleFolderClick(file.path)}>\n                                {file.name}\n                            </span>\n                        ) : (\n                            <Link to={`/notes${file.path.replace('public/notes', '')}`}>\n                                {file.name}\n                            </Link>\n                        )}\n                    </li>\n                ))}\n            </ul>\n        );\n    };\n\n    return (\n        <div className=\"notes-menu\">\n            {/* {renderFiles(files)} */}\n            {files.length > 0 && (\n                <FileExplorer explorerData={{\n                    name: 'notes', isFolder: true, items: files\n                    // .map(file => ({\n                    //     name: file.name,\n                    //     isFolder: file.type === 'dir',\n                    //     items: []\n                    // }))\n                    , path: '/notes'\n                }}\n                    onFolderClick={handleFolderClick}\n                    onFileClick={handleFileClick}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default NotesMenu;","import { React, useEffect, useState } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport NotesMenu from '../components/NotesMenu';\nimport MarkdownRenderer from '../components/MarkdownRenderer';\n\n\nconst NotesPage = () => {\n    const { '*': filename } = useParams();\n    const location = useLocation();\n    const [exists, setExists] = useState(true);\n\n    const currentPath = location.pathname;\n\n    useEffect(() => {\n        // Check if file exists\n        fetch(`/notes/${filename || 'disclaimer'}`)\n            .then((response) => response.text())\n            .then((text) => {\n                // console.log(text);\n                if (text.includes(\"<!DOCTYPE html>\")) {\n                    setExists(false);\n                }\n                setExists(true);\n            })\n            .catch(() => setExists(false));\n    }, [filename]);\n\n    console.log(\"filename: \", filename, \"exists: \", exists, 'currentPath: ', currentPath);\n\n\n    return (\n        <div className=\"notes-page\">\n            <NotesMenu currentPath={currentPath} />\n            <div className=\"notes-content\">\n                <MarkdownRenderer filename={exists ? filename : 'disclaimer'} />\n            </div>\n        </div>\n    );\n};\n\n\n\nexport default NotesPage;"],"names":["_ref","filename","content","setContent","useState","location","useLocation","fileToRender","undefined","fetchFile","useCallback","file","fetch","then","response","text","catch","error","console","log","useEffect","_jsx","className","children","id","ReactMarkdown","remarkPlugins","remarkGfm","remarkMath","rehypePlugins","rehypeRaw","rehypeKatex","components","pre","_ref2","_codeNode$properties","node","props","codeNode","match","exec","properties","SyntaxHighlighter","style","xcode","language","PreTag","String","value","replace","a","_ref3","href","startsWith","currentUrl","window","origin","pathname","hash","onClick","event","preventDefault","element","document","getElementById","scrollIntoView","behavior","handleSmoothScroll","substring","length","FileExplorer","explorerData","onFolderClick","onFileClick","expand","setExpand","_jsxs","isFolder","e","stopPropagation","path","_Fragment","VscChevronDown","VscChevronRight","VscFile","name","items","map","item","index","currentPath","files","setFiles","fileContent","setFileContent","navigate","useNavigate","async","octokit","Octokit","auth","process","REACT_APP_GITHUB_TOKEN","sanitizedPath","request","owner","repo","headers","Array","isArray","data","transformedFiles","type","sha","fetchFiles","handleFolderClick","atob","NotesPage","useParams","exists","setExists","includes","NotesMenu","MarkdownRenderer"],"sourceRoot":""}